{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  props: [\"showNotification\"],\n  name: \"ForumPage\",\n  data() {\n    return {\n      user: {\n        avatar: \"\",\n        name: \"\",\n        email: \"\",\n        username: \"guest\"\n      },\n      socket: null,\n      newPost: {\n        author: \"\",\n        title: \"\",\n        content: \"\",\n        image: \"\",\n        status: \"public\" // Default status\n      },\n      image: null,\n      imagePreview: null,\n      imageFileName: \"\",\n      // Add this line to track file name\n      posts: [],\n      message: \"\",\n      allowedUsers: [],\n      selectedAllowedUsers: [],\n      groups: [],\n      otherUsers: [],\n      followedUsers: [],\n      // Track followed users\n      // Chatbox data\n      isChatExpanded: false,\n      newMessage: \"\",\n      selectedChatUser: null,\n      chatUsers: [],\n      currentMessage: {\n        type: \"\",\n        message: \"\",\n        receiver: \"\",\n        username: \"\"\n      },\n      showCreateGroup: false,\n      newGroup: {\n        title: \"\",\n        description: \"\",\n        creator_id: null\n      },\n      groupMembership: {},\n      // Track membership status for each group\n      postsPrvMap: {},\n      // Added for postsprv data\n      showNotifications: false,\n      // For notification popup\n      notifications: [],\n      // Initialize as empty array\n      commentImages: {} // Add this to track images for each comment\n    };\n  },\n  beforeRouteEnter(to, from, next) {\n    fetch(`${import.meta.env.VITE_API_URL}/api/info`, {\n      method: \"GET\",\n      credentials: \"include\"\n    }).then(res => {\n      if (res.ok) {\n        next();\n      } else {\n        next('/login');\n      }\n    }).catch(() => {\n      next('/login');\n    });\n  },\n  async created() {\n    this.$router.push('/home');\n    try {\n      const userRes = await fetch(`${import.meta.env.VITE_API_URL}/api/info`, {\n        method: \"GET\",\n        credentials: \"include\"\n      });\n      const userData = await userRes.json();\n      console.log(\"userData\", userData);\n      this.user.name = userData.Username;\n      this.user.email = userData.Email;\n      this.user.username = userData.Username.toLowerCase();\n      if (userData.Avatar) {\n        this.user.avatar = `${import.meta.env.VITE_API_URL}/uploads/${userData.Avatar}`;\n      } else {\n        this.user.avatar = `https://api.dicebear.com/7.x/avataaars/svg?seed=${userData.Username}`;\n      }\n      // Initialize WebSocket\n      this.initializeWebSocket();\n      await this.fetchPostsPrv();\n      await this.fetchPosts();\n      await this.fetchAllUsers();\n      await this.fetchAllowedUsers();\n      await this.fetchGroups();\n      await this.fetchNotifications();\n    } catch (err) {\n      console.error(\"Initialization failed:\", err);\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    async fetchAllowedUsers() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/postsprivacy\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          if (!data.followers) {\n            return;\n          }\n          console.log(\"Allowed users data:\", data);\n          this.allowedUsers = data.followers.map(user => ({\n            username: user,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${user}`\n          }));\n        } else {\n          this.showNotification(\"Failed to fetch allowed users\", \"error\");\n          console.error(\"Failed to fetch allowed users\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch allowed users\", \"error\");\n        console.error(\"Error fetching allowed users:\", error);\n      }\n      console.log(\"Allowed users:\", this.allowedUsers);\n    },\n    async fetchAllUsers() {\n      try {\n        // Fetch all users for follow list\n        const allUsersRes = await fetch(\"http://localhost:8080/api/allusers\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (allUsersRes.ok) {\n          const allUsersData = await allUsersRes.json();\n          if (!allUsersData || allUsersData.length === 0) {\n            return;\n          }\n          console.log(\"All users data:\", allUsersData);\n          this.otherUsers = allUsersData.map(user => ({\n            name: user.fullname,\n            username: user.username,\n            avatar: user.avatar ? `http://localhost:8080/uploads/${user.avatar}` : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`,\n            followed: user.followed || false // Track if the user is followed\n          }));\n\n          // Initialize followedUsers based on allowedUsers\n          this.followedUsers = this.otherUsers.filter(user => user.followed);\n          console.log(\"Followed users:\", this.followedUsers);\n        }\n\n        // Fetch chat users from openchat endpoint\n        const chatUsersRes = await fetch(\"http://localhost:8080/api/openchat\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (chatUsersRes.ok) {\n          const chatUsersData = await chatUsersRes.json();\n          console.log(\"Chat users data:\", chatUsersData);\n          if (!chatUsersData || chatUsersData.length === 0) {\n            return;\n          } else {\n            this.chatUsers = chatUsersData.map(user => ({\n              id: user.id,\n              fullname: user.full_name,\n              name: user.username,\n              messages: [],\n              avatar: user.avatar ? `http://localhost:8080/uploads/${user.avatar}` : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`\n            }));\n          }\n        } else {\n          this.showNotification(\"Failed to fetch chat users\", \"error\");\n          console.error(\"Failed to fetch chat users\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch chat users\", \"error\");\n        console.error(\"Error fetching users:\", error);\n      }\n    },\n    initializeWebSocket() {\n      this.socket = new WebSocket(\"ws://localhost:8080/ws\");\n      this.socket.onmessage = event => {\n        const data = JSON.parse(event.data);\n        if (data.type == \"message\") {\n          this.showNotification(\"New message from \" + data.username, \"success\");\n        }\n        console.log(\"Received message:\", data);\n\n        // Find the user in chatUsers and add the message\n        const user = this.chatUsers.find(u => u.name === data.username);\n        if (user) {\n          this.showNotification(\"New message from \" + data.username, \"success\");\n          user.messages.push({\n            id: Date.now(),\n            text: data.message,\n            sender: \"other\",\n            timestamp: new Date().toISOString() // Add proper timestamp\n          });\n        }\n      };\n      this.socket.onopen = () => {\n        console.log(\"WebSocket connected\");\n      };\n      this.socket.onerror = error => {\n        console.error(\"WebSocket error:\", error);\n      };\n      this.socket.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n      };\n    },\n    async fetchPosts() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/getposts\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log(\"data\", data);\n\n          // Initialize posts with comments-related fields\n          if (!data) {\n            return;\n          }\n          this.posts = data.map(post => ({\n            ...post,\n            authorAvatar: post.Avatar ? `http://localhost:8080/uploads/${post.Avatar}` : `https://api.dicebear.com/7.x/avataaars/svg?seed=${post.Author}`,\n            Image: post.Image,\n            // Already a full URL if backend does it as above\n            comments: [],\n            newComment: \"\",\n            showComments: false,\n            commentError: \"\"\n          }));\n        } else {\n          this.showNotification(\"Failed to fetch posts\", \"error\");\n          console.error(\"Failed to fetch posts\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch posts\", \"error\");\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    async fetchComments(post) {\n      try {\n        const res = await fetch(`http://localhost:8080/api/getcomments?post_id=${post.Id}`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log(data);\n          if (!data) {\n            return;\n          }\n          post.comments = data.map(comment => ({\n            ...comment,\n            avatar: comment.avatar ? `http://localhost:8080/uploads/${comment.avatar}` : `https://api.dicebear.com/7.x/avataaars/svg?seed=${comment.author}`,\n            image: comment.image ? `http://localhost:8080/uploads/${comment.image}` : null\n          }));\n        } else {\n          this.showNotification(\"Failed to fetch comments\", \"error\");\n          console.error(\"Failed to fetch comments for post\", post.ID);\n          post.commentError = \"Failed to load comments.\";\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch comments\", \"error\");\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n    async addComment(post) {\n      if (!post.newComment.trim()) {\n        post.commentError = \"Comment cannot be empty.\";\n        return;\n      }\n\n      // Add length validation for comments\n      if (post.newComment.trim().length < 1) {\n        post.commentError = \"Comment must be at least 1 character long.\";\n        return;\n      }\n      if (post.newComment.trim().length > 500) {\n        post.commentError = \"Comment must not exceed 500 characters.\";\n        return;\n      }\n      const formData = new FormData();\n      formData.append(\"post_id\", post.Id.toString());\n      formData.append(\"comment\", post.newComment.trim());\n\n      // Use the specific image for this comment if it exists\n      if (this.commentImages[post.Id] && this.commentImages[post.Id].file) {\n        formData.append(\"image\", this.commentImages[post.Id].file);\n      }\n      try {\n        const res = await fetch(\"http://localhost:8080/api/addcomments\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData\n        });\n        if (res.ok) {\n          post.commentError = \"\";\n          // Clear all inputs\n          post.newComment = \"\";\n          // Clear only this comment's image\n          this.commentImages[post.Id] = null;\n          this.showNotification(\"Comment added successfully\", \"success\");\n          await this.fetchComments(post);\n        } else {\n          this.showNotification(\"Failed to add comment\", \"error\");\n          console.error(\"Failed to add comment\");\n          post.commentError = \"Failed to add comment.\";\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to add comment\", \"error\");\n        console.error(\"Error adding comment:\", error);\n        post.commentError = \"Error adding comment.\";\n      }\n    },\n    async submitPost() {\n      if (this.newPost.title.length < 1) {\n        this.message = \"Title must be at least 1 characters long.\";\n        this.showNotification(\"Title must be at least 1 characters long.\", \"error\");\n        return;\n      }\n      if (this.newPost.title.length > 50) {\n        this.message = \"Title must not exceed 50 characters.\";\n        this.showNotification(\"Title must not exceed 100 characters.\", \"error\");\n        return;\n      }\n      if (this.newPost.content.length < 1) {\n        this.message = \"Content must be at least 1 characters long.\";\n        this.showNotification(\"Content must be at least 10 characters long.\", \"error\");\n        return;\n      }\n      if (this.newPost.content.length > 1000) {\n        this.message = \"Content must not exceed 1000 characters.\";\n        this.showNotification(\"Content must not exceed 1000 characters.\", \"error\");\n        return;\n      }\n      try {\n        const formData = new FormData();\n        formData.append(\"title\", this.newPost.title);\n        formData.append(\"content\", this.newPost.content);\n        formData.append(\"status\", this.newPost.status);\n        formData.append(\"allowed_users\", this.selectedAllowedUsers.join(\",\"));\n        if (this.image) {\n          formData.append(\"image\", this.image);\n        }\n        const res = await fetch(\"http://localhost:8080/api/posts\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData\n        });\n        console.log(this.selectedAllowedUsers);\n        if (res.ok) {\n          this.message = \"Post created successfully!\";\n          // Clear all inputs\n          this.newPost = {\n            title: \"\",\n            content: \"\",\n            status: \"public\"\n          };\n          this.selectedAllowedUsers = [];\n          this.image = null;\n          this.imagePreview = null;\n          this.imageFileName = \"\";\n          this.showNotification(\"Post created successfully!\", \"success\");\n          await this.fetchPosts();\n        } else {\n          this.showNotification(\"Failed to create post\", \"error\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to create post\", \"error\");\n        console.error(\"Post creation failed:\", error);\n        this.message = \"Error submitting post.\";\n      }\n    },\n    logout() {\n      fetch(\"http://localhost:8080/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\"\n      }).then(res => {\n        if (res.ok) {\n          this.showNotification(\"Logged out successfully\", \"success\");\n          this.$router.push(\"/login\");\n        } else {\n          this.showNotification(\"Failed to logout\", \"error\");\n          this.$router.push(\"/login\");\n        }\n      }).catch(err => {\n        this.showNotification(\"Failed to logout\", \"error\");\n        console.error(\"Logout error:\", err);\n        this.$router.push(\"/login\");\n      });\n    },\n    gotoxprofile(username) {\n      this.$router.push(`/profile/${username}`);\n    },\n    async toggleJoin(group) {\n      try {\n        if (!group || !group.id) {\n          console.warn(\"toggleJoin called with invalid group\");\n          return;\n        }\n\n        // Get current user ID from the auth API\n        const userRes = await fetch(\"http://localhost:8080/api/info\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (!userRes.ok) {\n          this.showNotification(\"Failed to get user information\", \"error\");\n          return;\n        }\n        const userData = await userRes.json();\n        let endpoint;\n        let action;\n        let requestBody = {};\n        if (group.member_status === 'accepted') {\n          endpoint = \"http://localhost:8080/api/removememberfromgroup\";\n          action = \"leave\";\n          requestBody = {\n            group_id: group.id,\n            user_id: userData.id // Include user ID for leave operation\n          };\n        } else if (group.member_status === 'pending') {\n          endpoint = \"http://localhost:8080/api/cancelgrouprequest\";\n          action = \"cancel request from\";\n          requestBody = {\n            group_id: group.id\n          };\n        } else if (group.member_status === 'invited') {\n          endpoint = \"http://localhost:8080/api/acceptgroupinvite\";\n          action = \"accept invitation to\";\n          requestBody = {\n            group_id: group.id,\n            action: 'accept'\n          };\n        } else {\n          endpoint = \"http://localhost:8080/api/requesttojoingroup\";\n          action = \"join\";\n          requestBody = {\n            group_id: group.id\n          };\n        }\n        const response = await fetch(endpoint, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(requestBody)\n        });\n\n        // Update the local group status based on the action\n        if (response.ok) {\n          if (group.member_status === 'accepted') {\n            group.member_status = null;\n            this.showNotification(\"Left group successfully\", \"success\");\n          } else if (group.member_status === 'pending') {\n            group.member_status = null;\n            this.showNotification(\"Request cancelled successfully\", \"success\");\n          } else if (group.member_status === 'invited') {\n            group.member_status = 'accepted';\n            this.showNotification(\"Invitation accepted successfully\", \"success\");\n          } else {\n            group.member_status = 'pending';\n            this.showNotification(\"Join request sent successfully\", \"success\");\n          }\n\n          // Refresh groups list\n          await this.fetchGroups();\n        } else {\n          const errorText = await response.text();\n          console.error(`Failed to ${action} group: ${errorText}`);\n          this.showNotification(`Failed to ${action} group`, \"error\");\n        }\n      } catch (error) {\n        console.error(\"Error updating group membership:\", error);\n        this.showNotification(\"Failed to update group membership\", \"error\");\n      }\n    },\n    goToProfile() {\n      this.$router.push(`/profile/${this.user.username}`);\n    },\n    goToMyGroups() {\n      this.$router.push('/mygroups');\n    },\n    goToGroup(groupId) {\n      this.$router.push(`/group/${groupId}`);\n    },\n    toggleChat() {\n      this.isChatExpanded = !this.isChatExpanded;\n    },\n    selectChatUser(user) {\n      console.log(\"user\", user.name);\n      this.selectedChatUser = user.name;\n      console.log(\"selectedChatUser\", this.selectedChatUser);\n      this.fetchMessages(this.selectedChatUser);\n    },\n    async fetchMessages(user) {\n      console.log(\"Fetching messages for use11:\", user);\n      try {\n        const res = await fetch(`http://localhost:8080/api/getmessages?sender=${this.user.username}&receiver=${user}`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log(\"Fetched messages:\", data);\n\n          // Find the chat user in chatUsers array\n          const chatUser = this.chatUsers.find(u => u.name === user);\n          if (!chatUser) {\n            console.error(\"Chat user not found\");\n            return;\n          }\n\n          // Initialize messages array\n          chatUser.messages = [];\n\n          // Transform and add messages if data exists\n          if (data && Array.isArray(data)) {\n            chatUser.messages = data.map(msg => ({\n              id: Date.now() + Math.random(),\n              // Generate unique ID\n              text: msg.message,\n              sender: msg.username === this.user.username ? \"self\" : \"other\",\n              timestamp: msg.time\n            }));\n\n            // Sort messages by timestamp\n            chatUser.messages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n          }\n\n          // Update selectedChatUser with the found chat user\n          this.selectedChatUser = chatUser;\n        } else {\n          console.error(\"Failed to fetch messages\");\n          this.showNotification(\"Failed to load messages\", \"error\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n        this.showNotification(\"Error loading messages\", \"error\");\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() && this.selectedChatUser) {\n        // Prepare the message object\n        this.currentMessage.type = \"message\";\n        this.currentMessage.receiver = this.selectedChatUser.name;\n        this.currentMessage.username = this.user.username;\n        this.currentMessage.message = this.newMessage;\n\n        // Send the message through WebSocket\n        if (this.socket) {\n          this.socket.send(JSON.stringify(this.currentMessage));\n        }\n\n        // Add the message to the UI\n        this.selectedChatUser.messages.push({\n          text: this.newMessage,\n          sender: \"self\",\n          timestamp: Date.now()\n        });\n        console.log(\"sasa\", Date.now().toLocaleString(\"en-US\", {\n          month: \"short\",\n          day: \"numeric\",\n          year: \"numeric\",\n          hour: \"2-digit\",\n          minute: \"2-digit\"\n        }));\n        this.newMessage = \"\";\n      }\n    },\n    formatTimestamp(timestamp) {\n      return new Date(timestamp).toLocaleString(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\"\n      });\n    },\n    toggleComments(post) {\n      post.showComments = !post.showComments;\n      if (post.showComments && post.comments.length === 0) {\n        this.fetchComments(post);\n      }\n    },\n    getMessageClass(msg) {\n      return msg.sender === \"self\" ? \"self\" : \"other\";\n    },\n    async fetchGroups() {\n      try {\n        const response = await fetch(\"http://localhost:8080/api/getgroups\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (response.ok) {\n          const data = await response.json();\n          if (!data) {\n            return;\n          }\n          console.log(\"Fetched groups data:\", data);\n          this.groups = data.map(group => ({\n            id: group.id,\n            owner: group.creator_id,\n            is_owner: group.is_owner,\n            name: group.title,\n            description: group.description,\n            member_status: group.member_status\n          }));\n          console.log(\"Fetched groups:\", this.groups);\n\n          // Check membership status for each group\n          for (const group of this.groups) {\n            await this.checkGroupMembership(group.id);\n          }\n        } else {\n          this.showNotification(\"Failed to fetch groups\", \"error\");\n          console.error(\"Failed to fetch groups\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch groups\", \"error\");\n        console.error(\"Error fetching groups:\", error);\n      }\n    },\n    async checkGroupMembership(groupId) {\n      try {\n        if (!groupId) {\n          console.warn(\"checkGroupMembership called with invalid groupId\");\n          return;\n        }\n        const response = await fetch(`http://localhost:8080/api/ismember?group_id=${groupId}`, {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`Failed to check group membership: ${errorText}`);\n          this.showNotification(\"Failed to check group membership\", \"error\");\n          return;\n        }\n        const data = await response.json();\n        if (data && typeof data.is_member !== 'undefined') {\n          this.groupMembership[groupId] = data.is_member;\n        } else {\n          console.warn(\"Received invalid data format from server\");\n          this.groupMembership[groupId] = false; // Default to not a member\n        }\n      } catch (error) {\n        console.error(\"Error checking group membership:\", error);\n        this.showNotification(\"Failed to check group membership\", \"error\");\n      }\n    },\n    async createGroup() {\n      try {\n        // Get current user ID from the auth API\n        const userRes = await fetch(\"http://localhost:8080/api/info\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (!userRes.ok) {\n          this.showNotification(\"Failed to get user information\", \"error\");\n          return;\n        }\n        const userData = await userRes.json();\n        this.newGroup.creator_id = userData.id; // Use the correct user ID\n\n        const response = await fetch(\"http://localhost:8080/api/creategroups\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\"\n          },\n          body: JSON.stringify(this.newGroup)\n        });\n        if (response.ok) {\n          this.showNotification(\"Group created successfully\", \"success\");\n          const data = await response.json();\n          // Add the new group to the list\n          this.groups.push({\n            id: data.id,\n            name: data.title,\n            owner: this.user.username,\n            is_owner: true,\n            member_status: 'accepted',\n            description: data.description\n          });\n          this.showCreateGroup = false;\n          this.newGroup = {\n            title: \"\",\n            description: \"\",\n            creator_id: null\n          };\n        } else {\n          this.showNotification(\"Failed to create group\", \"error\");\n          console.error(\"Failed to create group\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to create group\", \"error\");\n        console.error(\"Error creating group:\", error);\n      }\n    },\n    async fetchPostsPrv() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/postsprv\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          if (!data || data.length === 0) {\n            console.warn(\"No posts privacy data found\");\n            return;\n          }\n          const map = {};\n          data.forEach(item => {\n            const postId = item.post_id.toString();\n            if (!map[postId]) {\n              map[postId] = [];\n            }\n            map[postId].push(item.username);\n          });\n          this.postsPrvMap = map;\n          console.log(\"postsPrvMap\", this.postsPrvMap);\n        }\n      } catch (error) {\n        console.error(\"Error fetching postsprv:\", error);\n      }\n    },\n    handleNotifClick() {\n      this.showNotifications = !this.showNotifications;\n      if (this.showNotifications) {\n        // Mark all unread notifications as read when opening the popup\n        this.notifications.forEach(notif => {\n          if (!notif.is_read) {\n            this.markNotificationAsRead(notif.id);\n          }\n        });\n      }\n    },\n    handleNotifClose(e) {\n      if (!this.showNotifications) return;\n      const popup = this.$refs.notifPopup;\n      const btn = this.$refs.notifBtn;\n      if (!popup || !btn || !popup.contains(e.target) && !btn.contains(e.target)) {\n        this.showNotifications = false;\n      }\n    },\n    async fetchNotifications() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/notifications\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log(\"sassasaassa\", data);\n\n          // Ensure data is an array and map it safely\n          this.notifications = Array.isArray(data) ? data.map(notif => ({\n            id: notif.id,\n            sender: notif.sender_username || 'Unknown',\n            text: notif.content || '',\n            time: notif.time || new Date().toISOString(),\n            type: notif.type || 'notification',\n            is_read: notif.is_read || false\n          })) : [];\n        } else {\n          this.notifications = [];\n        }\n      } catch (e) {\n        console.error('Error fetching notifications:', e);\n        this.notifications = [];\n      }\n    },\n    async markNotificationAsRead(notificationId) {\n      console.log(notificationId);\n      try {\n        // Find the notification first\n        const notification = this.notifications.find(n => n.id === notificationId);\n        if (!notification) return;\n\n        // Set a timeout to mark as read after 3 seconds\n        setTimeout(async () => {\n          try {\n            const res = await fetch(`http://localhost:8080/api/markasread`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include',\n              body: JSON.stringify({\n                notificationId,\n                is_read: 1\n              })\n            });\n            console.log(\"res\", res);\n            if (res.ok) {\n              notification.is_read = true;\n            }\n          } catch (error) {\n            console.error('Error marking notification as read:', error);\n          }\n        }, 3000); // 3 seconds delay\n      } catch (error) {\n        console.error('Error marking notification as read:', error);\n      }\n    },\n    handleImageUpload(event, postId = null) {\n      const file = event.target.files[0];\n      if (file) {\n        if (postId) {\n          // Handle comment image\n          this.commentImages[postId] = {\n            file: file,\n            preview: URL.createObjectURL(file),\n            fileName: file.name\n          };\n        } else {\n          // Handle post image\n          this.image = file;\n          this.imageFileName = file.name;\n          this.imagePreview = URL.createObjectURL(file);\n        }\n      } else {\n        if (postId) {\n          // Clear comment image\n          this.commentImages[postId] = null;\n        } else {\n          // Clear post image\n          this.image = null;\n          this.imagePreview = null;\n          this.imageFileName = \"\";\n        }\n      }\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diff = now - date;\n\n      // Less than 1 minute\n      if (diff < 60000) {\n        return 'just now';\n      }\n      // Less than 1 hour\n      if (diff < 3600000) {\n        const minutes = Math.floor(diff / 60000);\n        return `${minutes}m ago`;\n      }\n      // Less than 24 hours\n      if (diff < 86400000) {\n        const hours = Math.floor(diff / 3600000);\n        return `${hours}h ago`;\n      }\n      // Less than 7 days\n      if (diff < 604800000) {\n        const days = Math.floor(diff / 86400000);\n        return `${days}d ago`;\n      }\n      // Otherwise show the date\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    },\n    async fetchChatUsers() {\n      try {\n        const chatUsersRes = await fetch(\"http://localhost:8080/api/openchat\", {\n          method: \"GET\",\n          credentials: \"include\"\n        });\n        if (chatUsersRes.ok) {\n          const chatUsersData = await chatUsersRes.json();\n          console.log(\"Chat users data:\", chatUsersData);\n          if (!chatUsersData || chatUsersData.length === 0) {\n            return;\n          } else {\n            this.chatUsers = chatUsersData.map(user => ({\n              id: user.id,\n              fullname: user.full_name,\n              name: user.username,\n              messages: [],\n              avatar: user.avatar ? `http://localhost:8080/uploads/${user.avatar}` : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`\n            }));\n          }\n        } else {\n          this.showNotification(\"Failed to fetch chat users\", \"error\");\n          console.error(\"Failed to fetch chat users\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching chat users:\", error);\n        this.showNotification(\"Error fetching chat users\", \"error\");\n      }\n    },\n    async handleChatClick() {\n      if (!this.isChatExpanded) {\n        await this.fetchChatUsers();\n      }\n      this.isChatExpanded = !this.isChatExpanded;\n    }\n  },\n  mounted() {\n    document.addEventListener('click', this.handleNotifClose);\n  },\n  beforeUnmount() {\n    document.removeEventListener('click', this.handleNotifClose);\n  },\n  computed: {\n    unreadNotificationCount() {\n      return this.notifications.filter(notif => !notif.is_read).length;\n    }\n  }\n};","map":{"version":3,"names":["props","name","data","user","avatar","email","username","socket","newPost","author","title","content","image","status","imagePreview","imageFileName","posts","message","allowedUsers","selectedAllowedUsers","groups","otherUsers","followedUsers","isChatExpanded","newMessage","selectedChatUser","chatUsers","currentMessage","type","receiver","showCreateGroup","newGroup","description","creator_id","groupMembership","postsPrvMap","showNotifications","notifications","commentImages","beforeRouteEnter","to","from","next","fetch","import","meta","env","VITE_API_URL","method","credentials","then","res","ok","catch","created","$router","push","userRes","userData","json","console","log","Username","Email","toLowerCase","Avatar","initializeWebSocket","fetchPostsPrv","fetchPosts","fetchAllUsers","fetchAllowedUsers","fetchGroups","fetchNotifications","err","error","methods","followers","map","showNotification","allUsersRes","allUsersData","length","fullname","followed","filter","chatUsersRes","chatUsersData","id","full_name","messages","WebSocket","onmessage","event","JSON","parse","find","u","Date","now","text","sender","timestamp","toISOString","onopen","onerror","onclose","post","authorAvatar","Author","Image","comments","newComment","showComments","commentError","fetchComments","Id","comment","ID","addComment","trim","formData","FormData","append","toString","file","body","submitPost","join","logout","gotoxprofile","toggleJoin","group","warn","endpoint","action","requestBody","member_status","group_id","user_id","response","headers","stringify","errorText","goToProfile","goToMyGroups","goToGroup","groupId","toggleChat","selectChatUser","fetchMessages","chatUser","Array","isArray","msg","Math","random","time","sort","a","b","sendMessage","send","toLocaleString","month","day","year","hour","minute","formatTimestamp","toggleComments","getMessageClass","owner","is_owner","checkGroupMembership","is_member","createGroup","forEach","item","postId","post_id","handleNotifClick","notif","is_read","markNotificationAsRead","handleNotifClose","e","popup","$refs","notifPopup","btn","notifBtn","contains","target","sender_username","notificationId","notification","n","setTimeout","handleImageUpload","files","preview","URL","createObjectURL","fileName","formatTime","date","diff","minutes","floor","hours","days","toLocaleDateString","fetchChatUsers","handleChatClick","mounted","document","addEventListener","beforeUnmount","removeEventListener","computed","unreadNotificationCount"],"sources":["/Users/apple/Desktop/social-1/social-network/frontend/src/components/ForumPage.vue"],"sourcesContent":["<template>\n  <div class=\"forum-layout\">\n    <!-- Left Sidebar -->\n    <aside class=\"sidebar\">\n      <div class=\"sidebar-icons\">\n        <!-- Home Icon -->\n        <div class=\"sidebar-icon active\" title=\"Home\">\n          <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <path d=\"M3 12L12 3l9 9\" />\n            <path d=\"M9 21V9h6v12\" />\n          </svg>\n        </div>\n        <!-- Profile Icon -->\n        <div class=\"sidebar-icon\" title=\"Profile\" @click=\"goToProfile\">\n          <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <circle cx=\"12\" cy=\"8\" r=\"4\" />\n            <path d=\"M4 21v-2a4 4 0 014-4h8a4 4 0 014 4v2\" />\n          </svg>\n        </div>\n        <!-- Groups Icon -->\n        <div class=\"sidebar-icon\" title=\"Groups\" @click=\"goToMyGroups\">\n          <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <path d=\"M17 21v-2a4 4 0 00-4-4H7a4 4 0 00-4 4v2\" />\n            <circle cx=\"9\" cy=\"7\" r=\"4\" />\n            <path d=\"M23 21v-2a4 4 0 00-3-3.87\" />\n            <path d=\"M16 3.13a4 4 0 010 7.75\" />\n          </svg>\n        </div>\n        <!-- Settings Icon -->\n        <div class=\"sidebar-icon\" title=\"Settings\" @click=\"$router.push('/settings')\">\n          <svg width=\"24\" height=\"24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <circle cx=\"12\" cy=\"12\" r=\"3\" />\n            <path\n              d=\"M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 01-2.83 2.83l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-4 0v-.09a1.65 1.65 0 00-1-1.51 1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 010-4h.09a1.65 1.65 0 001.51-1 1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 012.83-2.83l.06.06a1.65 1.65 0 001.82.33h.09A1.65 1.65 0 0011 3.09V3a2 2 0 014 0v.09a1.65 1.65 0 001 1.51h.09a1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 2.83l-.06.06a1.65 1.65 0 00-.33 1.82v.09A1.65 1.65 0 0020.91 11H21a2 2 0 010 4h-.09a1.65 1.65 0 00-1.51 1z\" />\n          </svg>\n        </div>\n        <div class=\"sidebar-icon\" ref=\"notifBtn\" title=\"Notifications\" @click=\"handleNotifClick\">\n          <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <path d=\"M18 8a6 6 0 10-12 0c0 7-3 9-3 9h18s-3-2-3-9\" />\n            <path d=\"M13.73 21a2 2 0 01-3.46 0\" />\n          </svg>\n          <span v-if=\"unreadNotificationCount > 0\" class=\"notif-badge\">{{ unreadNotificationCount }}</span>\n        </div>\n        <!-- Notification Popup -->\n        <div v-if=\"showNotifications\" ref=\"notifPopup\" class=\"notif-popup\">\n          <div class=\"notif-popup-header\">Notifications</div>\n          <ul class=\"notif-list\">\n            <li v-if=\"!notifications || notifications.length === 0\" class=\"notif-item empty\">No notifications yet.</li>\n            <li v-for=\"notif in notifications || []\" :key=\"notif.time + notif.sender\" class=\"notif-item\"\n              :class=\"{ 'unread': !notif.is_read }\" @click=\"markNotificationAsRead(notif.id)\">\n              \n              <span class=\"notif-text\">\n                <b>{{ notif.sender }}</b>\n                <span v-if=\"notif.type === 'message'\">sent you a message: {{ notif.text && notif.text.length > 40 ?\n                  notif.text.slice(0, 40) + '…' : notif.text }}</span>\n                <span v-else>{{ notif.text }}</span>\n              </span>\n              <span class=\"notif-time\">{{ formatTimestamp(notif.time) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"sidebar-icon\" @click=\"logout\">\n          <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n            stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n            <path d=\"M17 16l4-4m0 0l-4-4m4 4H7\" />\n            <path d=\"M9 21H5a2 2 0 01-2-2V5a2 2 0 012-2h4\" />\n          </svg>\n        </div>\n      </div>\n    </aside>\n\n    <!-- Main Content Area -->\n    <div class=\"main-area\">\n      <!-- Top Avatar Bar -->\n      <div class=\"avatar-bar\">\n        <div class=\"avatar-list\">\n          <div v-for=\"other in otherUsers\" :key=\"other.name\" class=\"avatar-item\">\n            <img :src=\"other.avatar\" :alt=\"other.name\" @click=\"gotoxprofile(other.username)\" />\n            <span class=\"avatar-name\">{{ other.name.split(' ')[0] }}</span>\n          </div>\n        </div>\n      </div>\n\n      <!-- Create Post -->\n      <div class=\"create-post-card\">\n        <img class=\"profile-pic\" :src=\"user.avatar\" alt=\"Profile\" />\n        <form class=\"create-post-form\" @submit.prevent=\"submitPost\">\n          <input type=\"text\" v-model=\"newPost.title\" placeholder=\"What's on your mind?\" required />\n          <textarea v-model=\"newPost.content\" placeholder=\"Share your thoughts...\" required></textarea>\n          <label class=\"file-upload-label\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n              stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n              <path d=\"M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4\" />\n              <polyline points=\"17 8 12 3 7 8\" />\n              <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" />\n            </svg>\n            Upload Image\n            <input type=\"file\" @change=\"handleImageUpload\" accept=\"image/*\" />\n          </label>\n          <img v-if=\"imagePreview\" :src=\"imagePreview\" class=\"image-preview\" alt=\"Preview\" />\n          <div class=\"create-post-row\">\n            <div class=\"status-select\">\n              <select v-model=\"newPost.status\" required>\n                <option value=\"public\">Public</option>\n                <option value=\"private\">Private</option>\n                <option value=\"semi-private\">Semi-Private</option>\n              </select>\n            </div>\n          </div>\n          <div v-if=\"newPost.status === 'semi-private'\" class=\"allowed-users-select\">\n            <div v-if=\"allowedUsers.length === 0\">No User is following you!</div>\n            <label v-else v-for=\"user in allowedUsers\" :key=\"user.username\" class=\"allowed-user-pill\">\n              <input type=\"checkbox\" v-model=\"selectedAllowedUsers\" :value=\"user.username\" />\n              <span class=\"custom-checkbox\">\n                <svg v-if=\"selectedAllowedUsers.includes(user.username)\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\"\n                  fill=\"none\">\n                  <circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"#4f46e5\" />\n                  <path d=\"M5 9l3 3 5-5\" stroke=\"#fff\" stroke-width=\"2\" stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\" />\n                </svg>\n                <svg v-else width=\"18\" height=\"18\" viewBox=\"0 0 18 18\" fill=\"none\">\n                  <circle cx=\"9\" cy=\"9\" r=\"9\" fill=\"#e5e7eb\" />\n                </svg>\n              </span>\n              <img :src=\"user.avatar\" :alt=\"user.username\" class=\"allowed-user-avatar\" />\n              <span class=\"allowed-user-name\">{{ user.username }}</span>\n            </label>\n          </div>\n          <button class=\"post-btn\" type=\"submit\">Post</button>\n          <div v-if=\"message\" class=\"message\">{{ message }}</div>\n        </form>\n      </div>\n\n      <!-- Posts Grid -->\n      <div class=\"posts-grid\">\n        <div v-if=\"posts.length === 0\" class=\"no-posts\">No posts available. Be the first to post!</div>\n        <div v-else class=\"post-card\" v-for=\"post in posts\" :key=\"post.ID\">\n          <div class=\"post-image\" v-if=\"post.imageUrl\">\n            <img :src=\"post.imageUrl\" alt=\"Post image\" />\n          </div>\n          <div class=\"post-header\">\n            <img class=\"post-author-pic\" :src=\"post.authorAvatar\" alt=\"Author\" />\n            <div>\n              <h4>{{ post.Author }}</h4>\n              <p class=\"post-timestamp\">{{ formatTimestamp(post.Creation_date) }}</p>\n            </div>\n          </div>\n          <h3 class=\"post-title\">{{ post.Title }}</h3>\n          <p class=\"post-content\">{{ post.Content }}</p>\n          <img class=\"post-image\" v-if=\"post.Image\" :src=\"post.Image\" alt=\"Post Image\" />\n          <div class=\"post-actions\">\n            <span class=\"icon-btn\" @click=\"toggleComments(post)\">\n              <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n                stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n                <path d=\"M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z\" />\n              </svg>\n            </span>\n          </div>\n          <!-- Comments Section -->\n          <div v-if=\"post.showComments\" class=\"comments-section\">\n            <div v-if=\"post.comments.length === 0\" class=\"no-comments\">No comments yet. Be the first to comment!</div>\n            <div v-else class=\"comment\" v-for=\"comment in post.comments\" :key=\"comment.id\">\n              <div class=\"comment-header\">\n                <img class=\"comment-author-pic\" :src=\"comment.avatar\" alt=\"Comment Author\" />\n                <div>\n                  <h5>{{ comment.Author }}</h5>\n                  <p class=\"comment-timestamp\">{{ formatTimestamp(comment.creation_date) }}</p>\n                </div>\n              </div>\n              <p class=\"comment-content\">{{ comment.comment }}</p>\n              <img class=\"comment-image\" v-if=\"comment.image\" :src=\"comment.image\" alt=\"Comment Image\" />\n            </div>\n            <form @submit.prevent=\"addComment(post)\" class=\"comment-form\">\n              <div class=\"comment-input-row\">\n                <textarea v-model=\"post.newComment\" placeholder=\"Add a comment...\" required></textarea>\n                <label class=\"file-upload-label\">\n                  <svg width=\"18\" height=\"18\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n                    <path d=\"M21 15v4a2 2 0 01-2 2H5a2 2 0 01-2-2v-4\" />\n                    <polyline points=\"17 8 12 3 7 8\" />\n                    <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" />\n                  </svg>\n                  <input type=\"file\" @change=\"handleImageUpload($event, post.Id)\" accept=\"image/*\" />\n                </label>\n                <button type=\"submit\" class=\"comment-submit-btn\" title=\"Add Comment\">\n                  <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n                    stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n                    <path d=\"M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z\" />\n                  </svg>\n                </button>\n              </div>\n              <div v-if=\"commentImages[post.Id] && commentImages[post.Id].fileName\" class=\"file-name-display\">\n                Selected file: {{ commentImages[post.Id].fileName }}\n              </div>\n              <img v-if=\"commentImages[post.Id] && commentImages[post.Id].preview\" :src=\"commentImages[post.Id].preview\" class=\"image-preview\" alt=\"Preview\" />\n              <div v-if=\"post.commentError\" class=\"comment-error\">{{ post.commentError }}</div>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- Right Sidebar -->\n    <aside class=\"rightbar\">\n      <div class=\"groups-section\">\n        <div class=\"groups-header\">\n          <span>Groups</span>\n          <button class=\"create-group-btn\" @click=\"showCreateGroup = true\" title=\"Create Group\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n              stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n              <circle cx=\"12\" cy=\"12\" r=\"10\" />\n              <path d=\"M12 8v8M8 12h8\" />\n            </svg>\n          </button>\n          <!-- <button class=\"invite-group-btn\" @click=\"inviteToGroup\" title=\"Invite to Group\">\n            <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" viewBox=\"0 0 24 24\"><path d=\"M21 10v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6\"/><path d=\"M3 6l9 6 9-6\"/></svg>\n          </button> -->\n        </div>\n        <ul class=\"groups-list\">\n          <li v-for=\"group in groups\" :key=\"group.id\" class=\"group-list-item group-clickable\"\n            @click=\"goToGroup(group.id)\">\n            <div class=\"group-info\">\n              <span class=\"group-avatar\">\n                <svg width=\"20\" height=\"20\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n                  stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n                  <path d=\"M17 21v-2a4 4 0 00-4-4H7a4 4 0 00-4 4v2\" />\n                  <circle cx=\"9\" cy=\"7\" r=\"4\" />\n                  <path d=\"M23 21v-2a4 4 0 00-3-3.87\" />\n                  <path d=\"M16 3.13a4 4 0 010 7.75\" />\n                </svg>\n              </span>\n              <div class=\"group-details\">\n                <span class=\"group-title\">{{ group.name }}</span>\n                <span class=\"group-desc\">{{ group.description }}</span>\n                <span v-if=\"group.is_owner\" class=\"owner-badge\">Owner</span>\n              </div>\n            </div>\n            <button v-if=\"group.member_status == 'accepted' && !group.is_owner\" class=\"followed-btn\"\n              @click.stop=\"toggleJoin(group)\">\n              Leave\n            </button>\n            <button v-else-if=\"group.member_status == 'pending' && !group.is_owner\" class=\"pending-btn\"\n              @click.stop=\"toggleJoin(group)\">\n              Cancel Request\n            </button>\n            <button v-else-if=\"group.member_status == 'invited' && !group.is_owner\" class=\"pending-btn\"\n              @click.stop=\"toggleJoin(group)\">\n              Accept Invitation\n            </button>\n            <button v-else-if=\"!group.is_owner\" class=\"follow-btn\" @click.stop=\"toggleJoin(group)\">\n              Join\n            </button>\n          </li>\n        </ul>\n      </div>\n      <div class=\"users-section\">\n        <div class=\"users-header\">\n          <span>Followed Users: </span>\n        </div>\n        <ul class=\"users-list\">\n          <li v-for=\"followed in followedUsers\" :key=\"followed.name\" class=\"user-list-item\">\n            <img class=\"mini-profile-pic\" :src=\"followed.avatar\" alt=\"User\" @click=\"gotoxprofile(followed.username)\" />\n            <span class=\"user-name\" @click=\"gotoxprofile(followed.username)\">{{ followed.name }}</span>\n          </li>\n        </ul>\n      </div>\n    </aside>\n\n    <!-- Create Group Modal -->\n    <div v-if=\"showCreateGroup\" class=\"modal-overlay\">\n      <div class=\"modal-content create-group-modal\">\n        <h3>Create New Group</h3>\n        <form @submit.prevent=\"createGroup\">\n          <div class=\"form-group\">\n            <label for=\"groupTitle\">Group Title</label>\n            <input id=\"groupTitle\" v-model=\"newGroup.title\" type=\"text\" required placeholder=\"Enter group title\" />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"groupDescription\">Description</label>\n            <textarea id=\"groupDescription\" v-model=\"newGroup.description\" required\n              placeholder=\"Enter group description\"></textarea>\n          </div>\n          <div class=\"modal-buttons\">\n            <button type=\"submit\" class=\"submit-btn\">Create Group</button>\n            <button type=\"button\" class=\"cancel-btn\" @click=\"showCreateGroup = false\">\n              Cancel\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n\n    <!-- Chat Floating Button -->\n    <button class=\"chat-fab\" @click=\"handleChatClick\" title=\"Open Chat\">\n      <svg width=\"28\" height=\"28\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2.2\" stroke-linecap=\"round\"\n        stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n        <path d=\"M21 15a2 2 0 01-2 2H7l-4 4V5a2 2 0 012-2h14a2 2 0 012 2z\" />\n      </svg>\n    </button>\n\n    <!-- Chat Modal -->\n    <div v-if=\"isChatExpanded\" class=\"chat-modal-overlay\" @click.self=\"isChatExpanded = false\">\n      <div class=\"chat-modal\">\n        <div class=\"chat-modal-header\">\n          <span>Chat</span>\n          <button class=\"chat-modal-close\" @click=\"isChatExpanded = false\">&times;</button>\n        </div>\n        <div class=\"chat-users-list\">\n          <div class=\"chat-users-title\">Chat Users</div>\n          <ul>\n            <li v-for=\"user in chatUsers\" :key=\"user.name\" @click=\"selectChatUser(user)\"\n              :class=\"{ selected: selectedChatUser && selectedChatUser.name === user.name }\">\n              <img :src=\"user.avatar\" :alt=\"user.name\" class=\"chat-user-avatar\" />\n              <span>{{ user.fullname }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"chat-messages-area\" v-if=\"selectedChatUser\">\n          <div class=\"chat-messages-title\">Chat with {{ selectedChatUser.name }}</div>\n          <div class=\"chat-messages-list\">\n            <div v-for=\"msg in selectedChatUser.messages\" :key=\"msg.id\"\n              :class=\"['chat-msg', msg.sender === 'self' ? 'self' : 'other']\">\n              <span>{{ msg.text }}</span>\n              <span class=\"chat-msg-time\">{{ formatTimestamp(msg.timestamp) }}</span>\n            </div>\n          </div>\n          <form class=\"chat-send-form\" @submit.prevent=\"sendMessage\">\n            <input v-model=\"newMessage\" placeholder=\"Type a message...\" required />\n            <button type=\"submit\" class=\"chat-send-btn\" title=\"Send\">\n              <svg width=\"22\" height=\"22\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\"\n                stroke-linejoin=\"round\" viewBox=\"0 0 24 24\">\n                <line x1=\"22\" y1=\"2\" x2=\"11\" y2=\"13\" />\n                <polygon points=\"22 2 15 22 11 13 2 9 22 2\" />\n              </svg>\n            </button>\n          </form>\n        </div>\n        <div v-else class=\"chat-no-user\">Select a user to start chatting</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: [\"showNotification\"],\n  name: \"ForumPage\",\n  data() {\n    return {\n      user: {\n        avatar: \"\",\n        name: \"\",\n        email: \"\",\n        username: \"guest\",\n      },\n      socket: null,\n      newPost: {\n        author: \"\",\n        title: \"\",\n        content: \"\",\n        image: \"\",\n        status: \"public\", // Default status\n      },\n      image: null,\n      imagePreview: null,\n      imageFileName: \"\", // Add this line to track file name\n      posts: [],\n      message: \"\",\n      allowedUsers: [],\n      selectedAllowedUsers: [],\n      groups: [],\n      otherUsers: [],\n      followedUsers: [], // Track followed users\n      // Chatbox data\n      isChatExpanded: false,\n      newMessage: \"\",\n      selectedChatUser: null,\n      chatUsers: [],\n      currentMessage: {\n        type: \"\",\n        message: \"\",\n        receiver: \"\",\n        username: \"\",\n      },\n      showCreateGroup: false,\n      newGroup: {\n        title: \"\",\n        description: \"\",\n        creator_id: null,\n      },\n      groupMembership: {}, // Track membership status for each group\n      postsPrvMap: {}, // Added for postsprv data\n      showNotifications: false, // For notification popup\n      notifications: [], // Initialize as empty array\n      commentImages: {}, // Add this to track images for each comment\n    };\n  },\n  beforeRouteEnter(to, from, next) {\n    fetch(`${import.meta.env.VITE_API_URL}/api/info`, {\n      method: \"GET\",\n      credentials: \"include\",\n    })\n      .then(res => {\n        if (res.ok) {\n          next();\n        } else {\n          next('/login');\n        }\n      })\n      .catch(() => {\n        next('/login');\n      });\n  },\n  async created() {\n    this.$router.push('/home');\n    try {\n      const userRes = await fetch(`${import.meta.env.VITE_API_URL}/api/info`, {\n        method: \"GET\",\n        credentials: \"include\",\n      });\n      const userData = await userRes.json();\n      console.log(\"userData\", userData);\n\n      this.user.name = userData.Username;\n      this.user.email = userData.Email;\n      this.user.username = userData.Username.toLowerCase();\n\n      if (userData.Avatar) {\n        this.user.avatar = `${import.meta.env.VITE_API_URL}/uploads/${userData.Avatar}`;\n      } else {\n        this.user.avatar = `https://api.dicebear.com/7.x/avataaars/svg?seed=${userData.Username}`;\n      }\n      // Initialize WebSocket\n      this.initializeWebSocket();\n      await this.fetchPostsPrv();\n      await this.fetchPosts();\n      await this.fetchAllUsers();\n      await this.fetchAllowedUsers();\n      await this.fetchGroups();\n      await this.fetchNotifications();\n    } catch (err) {\n      console.error(\"Initialization failed:\", err);\n      this.$router.push(\"/login\");\n    }\n  },\n  methods: {\n    async fetchAllowedUsers() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/postsprivacy\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (res.ok) {\n          const data = await res.json();\n          if (!data.followers) {\n            return;\n          }\n          console.log(\"Allowed users data:\", data);\n\n          this.allowedUsers = data.followers.map((user) => ({\n            username: user,\n            avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${user}`,\n          }));\n        } else {\n          this.showNotification(\"Failed to fetch allowed users\", \"error\");\n          console.error(\"Failed to fetch allowed users\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch allowed users\", \"error\");\n        console.error(\"Error fetching allowed users:\", error);\n      }\n      console.log(\"Allowed users:\", this.allowedUsers);\n\n    },\n    async fetchAllUsers() {\n      try {\n        // Fetch all users for follow list\n        const allUsersRes = await fetch(\"http://localhost:8080/api/allusers\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (allUsersRes.ok) {\n          const allUsersData = await allUsersRes.json();\n          if ((!allUsersData) || allUsersData.length === 0) {\n            return;\n          }\n          console.log(\"All users data:\", allUsersData);\n          this.otherUsers = allUsersData.map((user) => ({\n            name: user.fullname,\n            username: user.username,\n            avatar: user.avatar\n              ? `http://localhost:8080/uploads/${user.avatar}`\n              : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`,\n            followed: user.followed || false, // Track if the user is followed\n          }));\n\n          // Initialize followedUsers based on allowedUsers\n          this.followedUsers = this.otherUsers.filter(\n            (user) => user.followed\n          );\n          console.log(\"Followed users:\", this.followedUsers);\n\n        }\n\n        // Fetch chat users from openchat endpoint\n        const chatUsersRes = await fetch(\"http://localhost:8080/api/openchat\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (chatUsersRes.ok) {\n          const chatUsersData = await chatUsersRes.json();\n          console.log(\"Chat users data:\", chatUsersData);\n          if (!chatUsersData || chatUsersData.length === 0) {\n            return;\n          } else {\n            this.chatUsers = chatUsersData.map((user) => ({\n              id: user.id,\n              fullname: user.full_name,\n              name: user.username,\n              messages: [],\n              avatar:   user.avatar \n                ? `http://localhost:8080/uploads/${user.avatar}`\n                : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`,\n            }));\n            \n            \n          }\n        } else {\n          this.showNotification(\"Failed to fetch chat users\", \"error\");\n          console.error(\"Failed to fetch chat users\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch chat users\", \"error\");\n        console.error(\"Error fetching users:\", error);\n      }\n    },\n    initializeWebSocket() {\n      this.socket = new WebSocket(\"ws://localhost:8080/ws\");\n\n      this.socket.onmessage = (event) => {\n        const data = JSON.parse(event.data);\nif (data.type == \"message\" ){\n  this.showNotification(\"New message from \" + data.username, \"success\");\n}\n        console.log(\"Received message:\", data);\n\n        // Find the user in chatUsers and add the message\n        const user = this.chatUsers.find((u) => u.name === data.username);\n        if (user) {\n          this.showNotification(\"New message from \" + data.username, \"success\");\n          user.messages.push({\n            id: Date.now(),\n            text: data.message,\n            sender: \"other\",\n            timestamp: new Date().toISOString() // Add proper timestamp\n          });\n        }\n      };\n      this.socket.onopen = () => {\n        console.log(\"WebSocket connected\");\n      };\n\n      this.socket.onerror = (error) => {\n        console.error(\"WebSocket error:\", error);\n      };\n\n      this.socket.onclose = () => {\n        console.log(\"WebSocket disconnected\");\n      };\n    },\n    async fetchPosts() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/getposts\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (res.ok) {\n          const data = await res.json();\n\n          console.log(\"data\", data);\n\n          // Initialize posts with comments-related fields\n          if (!data) {\n            return;\n          }\n          this.posts = data.map((post) => ({\n            ...post,\n            authorAvatar: post.Avatar\n              ? `http://localhost:8080/uploads/${post.Avatar}`\n              : `https://api.dicebear.com/7.x/avataaars/svg?seed=${post.Author}`,\n            Image: post.Image, // Already a full URL if backend does it as above\n            comments: [],\n            newComment: \"\",\n            showComments: false,\n            commentError: \"\",\n          }));\n        } else {\n          this.showNotification(\"Failed to fetch posts\", \"error\");\n          console.error(\"Failed to fetch posts\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch posts\", \"error\");\n        console.error(\"Error fetching posts:\", error);\n      }\n    },\n    async fetchComments(post) {\n      try {\n        const res = await fetch(\n          `http://localhost:8080/api/getcomments?post_id=${post.Id}`,\n          {\n            method: \"GET\",\n            credentials: \"include\",\n          }\n        );\n        if (res.ok) {\n          const data = await res.json();\n          console.log(data);\n          if (!data) {\n            return;\n          }\n          post.comments = data.map((comment) => ({\n            ...comment,\n            avatar: comment.avatar\n              ? `http://localhost:8080/uploads/${comment.avatar}`\n              : `https://api.dicebear.com/7.x/avataaars/svg?seed=${comment.author}`,\n            image: comment.image ? `http://localhost:8080/uploads/${comment.image}` : null,\n          }));\n\n        } else {\n          this.showNotification(\"Failed to fetch comments\", \"error\");\n          console.error(\"Failed to fetch comments for post\", post.ID);\n          post.commentError = \"Failed to load comments.\";\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch comments\", \"error\");\n        console.error(\"Error fetching comments:\", error);\n      }\n    },\n    async addComment(post) {\n      if (!post.newComment.trim()) {\n        post.commentError = \"Comment cannot be empty.\";\n        return;\n      }\n\n      // Add length validation for comments\n      if (post.newComment.trim().length < 1) {\n        post.commentError = \"Comment must be at least 1 character long.\";\n        return;\n      }\n\n      if (post.newComment.trim().length > 500) {\n        post.commentError = \"Comment must not exceed 500 characters.\";\n        return;\n      }\n\n      const formData = new FormData();\n      formData.append(\"post_id\", post.Id.toString());\n      formData.append(\"comment\", post.newComment.trim());\n\n      // Use the specific image for this comment if it exists\n      if (this.commentImages[post.Id] && this.commentImages[post.Id].file) {\n        formData.append(\"image\", this.commentImages[post.Id].file);\n      }\n\n      try {\n        const res = await fetch(\"http://localhost:8080/api/addcomments\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData\n        });\n\n        if (res.ok) {\n          post.commentError = \"\";\n          // Clear all inputs\n          post.newComment = \"\";\n          // Clear only this comment's image\n          this.commentImages[post.Id] = null;\n          this.showNotification(\"Comment added successfully\", \"success\");\n          await this.fetchComments(post);\n        } else {\n          this.showNotification(\"Failed to add comment\", \"error\");\n          console.error(\"Failed to add comment\");\n          post.commentError = \"Failed to add comment.\";\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to add comment\", \"error\");\n        console.error(\"Error adding comment:\", error);\n        post.commentError = \"Error adding comment.\";\n      }\n    },\n    async submitPost() {\n      if (this.newPost.title.length < 1) {\n        this.message = \"Title must be at least 1 characters long.\";\n        this.showNotification(\"Title must be at least 1 characters long.\", \"error\");\n        return;\n      }\n\n      if (this.newPost.title.length > 50 ) {\n        this.message = \"Title must not exceed 50 characters.\";\n        this.showNotification(\"Title must not exceed 100 characters.\", \"error\");\n        return;\n      }\n\n      if (this.newPost.content.length < 1) {\n        this.message = \"Content must be at least 1 characters long.\";\n        this.showNotification(\"Content must be at least 10 characters long.\", \"error\");\n        return;\n      }\n\n      if (this.newPost.content.length > 1000) {\n        this.message = \"Content must not exceed 1000 characters.\";\n        this.showNotification(\"Content must not exceed 1000 characters.\", \"error\");\n        return;\n      }\n\n      try {\n        const formData = new FormData();\n        formData.append(\"title\", this.newPost.title);\n        formData.append(\"content\", this.newPost.content);\n        formData.append(\"status\", this.newPost.status);\n        formData.append(\"allowed_users\", this.selectedAllowedUsers.join(\",\"));\n        if (this.image) {\n          formData.append(\"image\", this.image);\n        }\n\n        const res = await fetch(\"http://localhost:8080/api/posts\", {\n          method: \"POST\",\n          credentials: \"include\",\n          body: formData\n        });\n        console.log(this.selectedAllowedUsers);\n\n        if (res.ok) {\n          this.message = \"Post created successfully!\";\n          // Clear all inputs\n          this.newPost = {\n            title: \"\",\n            content: \"\",\n            status: \"public\"\n          };\n          this.selectedAllowedUsers = [];\n          this.image = null;\n          this.imagePreview = null;\n          this.imageFileName = \"\";\n          this.showNotification(\"Post created successfully!\", \"success\");\n          await this.fetchPosts();\n        } else {\n          this.showNotification(\"Failed to create post\", \"error\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to create post\", \"error\");\n        console.error(\"Post creation failed:\", error);\n        this.message = \"Error submitting post.\";\n      }\n    },\n    logout() {\n      fetch(\"http://localhost:8080/api/auth/logout\", {\n        method: \"POST\",\n        credentials: \"include\",\n      })\n        .then((res) => {\n          if (res.ok) {\n            this.showNotification(\"Logged out successfully\", \"success\");\n            this.$router.push(\"/login\");\n          } else {\n            this.showNotification(\"Failed to logout\", \"error\");\n            this.$router.push(\"/login\");\n          }\n        })\n        .catch((err) => {\n          this.showNotification(\"Failed to logout\", \"error\");\n          console.error(\"Logout error:\", err);\n          this.$router.push(\"/login\");\n        });\n    },\n    gotoxprofile(username) {\n      this.$router.push(`/profile/${username}`);\n    },\n    async toggleJoin(group) {\n      try {\n        if (!group || !group.id) {\n          console.warn(\"toggleJoin called with invalid group\");\n          return;\n        }\n\n        // Get current user ID from the auth API\n        const userRes = await fetch(\"http://localhost:8080/api/info\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        \n        if (!userRes.ok) {\n          this.showNotification(\"Failed to get user information\", \"error\");\n          return;\n        }\n        \n        const userData = await userRes.json();\n\n        let endpoint;\n        let action;\n        let requestBody = {};\n\n        if (group.member_status === 'accepted') {\n          endpoint = \"http://localhost:8080/api/removememberfromgroup\";\n          action = \"leave\";\n          requestBody = {\n            group_id: group.id,\n            user_id: userData.id  // Include user ID for leave operation\n          };\n        } else if (group.member_status === 'pending') {\n          endpoint = \"http://localhost:8080/api/cancelgrouprequest\";\n          action = \"cancel request from\";\n          requestBody = {\n            group_id: group.id\n          };\n        } else if (group.member_status === 'invited') {\n          endpoint = \"http://localhost:8080/api/acceptgroupinvite\";\n          action = \"accept invitation to\";\n          requestBody = {\n            group_id: group.id,\n            action: 'accept'\n          };\n        } else {\n          endpoint = \"http://localhost:8080/api/requesttojoingroup\";\n          action = \"join\";\n          requestBody = {\n            group_id: group.id\n          };\n        }\n\n        const response = await fetch(endpoint, {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(requestBody),\n        });\n\n        // Update the local group status based on the action\n        if (response.ok) {\n          if (group.member_status === 'accepted') {\n            group.member_status = null;\n            this.showNotification(\"Left group successfully\", \"success\");\n          } else if (group.member_status === 'pending') {\n            group.member_status = null;\n            this.showNotification(\"Request cancelled successfully\", \"success\");\n          } else if (group.member_status === 'invited') {\n            group.member_status = 'accepted';\n            this.showNotification(\"Invitation accepted successfully\", \"success\");\n          } else {\n            group.member_status = 'pending';\n            this.showNotification(\"Join request sent successfully\", \"success\");\n          }\n\n          // Refresh groups list\n          await this.fetchGroups();\n        } else {\n          const errorText = await response.text();\n          console.error(`Failed to ${action} group: ${errorText}`);\n          this.showNotification(`Failed to ${action} group`, \"error\");\n        }\n      } catch (error) {\n        console.error(\"Error updating group membership:\", error);\n        this.showNotification(\"Failed to update group membership\", \"error\");\n      }\n    },\n    goToProfile() {\n      this.$router.push(`/profile/${this.user.username}`);\n    },\n    goToMyGroups() {\n      this.$router.push('/mygroups');\n    },\n    goToGroup(groupId) {\n      this.$router.push(`/group/${groupId}`);\n    },\n    toggleChat() {\n      this.isChatExpanded = !this.isChatExpanded;\n    },\n    selectChatUser(user) {\n      console.log(\"user\", user.name);\n      this.selectedChatUser = user.name;\n      console.log(\"selectedChatUser\", this.selectedChatUser);\n      this.fetchMessages(this.selectedChatUser);\n    },\n    async fetchMessages(user) {\n      console.log(\"Fetching messages for use11:\", user);\n      \n      try {\n        const res = await fetch(\n          `http://localhost:8080/api/getmessages?sender=${this.user.username}&receiver=${user}`,\n          {\n            method: \"GET\",\n            credentials: \"include\",\n          }\n        );\n\n\n        if (res.ok) {\n          const data = await res.json();\n          console.log(\"Fetched messages:\", data);\n\n          // Find the chat user in chatUsers array\n          const chatUser = this.chatUsers.find(u => u.name === user);\n          if (!chatUser) {\n            console.error(\"Chat user not found\");\n            return;\n          }\n\n          // Initialize messages array\n          chatUser.messages = [];\n\n          // Transform and add messages if data exists\n          if (data && Array.isArray(data)) {\n            chatUser.messages = data.map(msg => ({\n              id: Date.now() + Math.random(), // Generate unique ID\n              text: msg.message,\n              sender: msg.username === this.user.username ? \"self\" : \"other\",\n              timestamp: msg.time\n            }));\n\n            // Sort messages by timestamp\n            chatUser.messages.sort((a, b) => new Date(a.timestamp) - new Date(b.timestamp));\n          }\n\n          // Update selectedChatUser with the found chat user\n          this.selectedChatUser = chatUser;\n        } else {\n          console.error(\"Failed to fetch messages\");\n          this.showNotification(\"Failed to load messages\", \"error\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching messages:\", error);\n        this.showNotification(\"Error loading messages\", \"error\");\n      }\n    },\n    sendMessage() {\n      if (this.newMessage.trim() && this.selectedChatUser) {\n        // Prepare the message object\n        this.currentMessage.type = \"message\";\n        this.currentMessage.receiver = this.selectedChatUser.name;\n        this.currentMessage.username = this.user.username;\n        this.currentMessage.message = this.newMessage;\n\n\n        // Send the message through WebSocket\n        if (this.socket) {\n          this.socket.send(JSON.stringify(this.currentMessage));\n        }\n\n        // Add the message to the UI\n        this.selectedChatUser.messages.push({\n\n          text: this.newMessage,\n          sender: \"self\",\n          timestamp:  Date.now()\n          \n        });\n  \n        \n        console.log(\"sasa\",Date.now().toLocaleString(\"en-US\", {\n          month: \"short\",\n          day: \"numeric\",\n          year: \"numeric\",\n          hour: \"2-digit\",\n          minute: \"2-digit\",\n        }));\n        \n\n        this.newMessage = \"\";\n      }\n    },\n    formatTimestamp(timestamp) {\n      return new Date(timestamp).toLocaleString(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n      });\n    },\n    toggleComments(post) {\n      post.showComments = !post.showComments;\n      if (post.showComments && post.comments.length === 0) {\n        this.fetchComments(post);\n      }\n    },\n    getMessageClass(msg) {\n      return msg.sender === \"self\" ? \"self\" : \"other\";\n    },\n    async fetchGroups() {\n      try {\n        const response = await fetch(\"http://localhost:8080/api/getgroups\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          if (!data) {\n            return;\n          }\n          console.log(\"Fetched groups data:\", data);\n          this.groups = data.map((group) => ({\n            id: group.id,\n            owner: group.creator_id,\n            is_owner: group.is_owner,\n            name: group.title,\n            description: group.description,\n            member_status: group.member_status\n          }));\n          console.log(\"Fetched groups:\", this.groups);\n\n          // Check membership status for each group\n          for (const group of this.groups) {\n            await this.checkGroupMembership(group.id);\n          }\n        } else {\n          this.showNotification(\"Failed to fetch groups\", \"error\");\n          console.error(\"Failed to fetch groups\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to fetch groups\", \"error\");\n        console.error(\"Error fetching groups:\", error);\n      }\n    },\n    async checkGroupMembership(groupId) {\n      try {\n        if (!groupId) {\n          console.warn(\"checkGroupMembership called with invalid groupId\");\n          return;\n        }\n        const response = await fetch(\n          `http://localhost:8080/api/ismember?group_id=${groupId}`,\n          {\n            method: \"GET\",\n            credentials: \"include\",\n          }\n        );\n\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          console.error(`Failed to check group membership: ${errorText}`);\n          this.showNotification(\"Failed to check group membership\", \"error\");\n          return;\n        }\n\n        const data = await response.json();\n        if (data && typeof data.is_member !== 'undefined') {\n          this.groupMembership[groupId] = data.is_member;\n        } else {\n          console.warn(\"Received invalid data format from server\");\n          this.groupMembership[groupId] = false; // Default to not a member\n        }\n      } catch (error) {\n        console.error(\"Error checking group membership:\", error);\n        this.showNotification(\"Failed to check group membership\", \"error\");\n      }\n    },\n    async createGroup() {\n      try {\n        // Get current user ID from the auth API\n        const userRes = await fetch(\"http://localhost:8080/api/info\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        \n        if (!userRes.ok) {\n          this.showNotification(\"Failed to get user information\", \"error\");\n          return;\n        }\n        \n        const userData = await userRes.json();\n        this.newGroup.creator_id = userData.id; // Use the correct user ID\n\n        const response = await fetch(\"http://localhost:8080/api/creategroups\", {\n          method: \"POST\",\n          credentials: \"include\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify(this.newGroup),\n        });\n\n        if (response.ok) {\n          this.showNotification(\"Group created successfully\", \"success\");\n          const data = await response.json();\n          // Add the new group to the list\n          this.groups.push({\n            id: data.id,\n            name: data.title,\n            owner: this.user.username,\n            is_owner: true,\n            member_status: 'accepted',\n            description: data.description,\n          });\n          this.showCreateGroup = false;\n          this.newGroup = {\n            title: \"\",\n            description: \"\",\n            creator_id: null,\n          };\n        } else {\n          this.showNotification(\"Failed to create group\", \"error\");\n          console.error(\"Failed to create group\");\n        }\n      } catch (error) {\n        this.showNotification(\"Failed to create group\", \"error\");\n        console.error(\"Error creating group:\", error);\n      }\n    },\n    async fetchPostsPrv() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/postsprv\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (res.ok) {\n          const data = await res.json();\n          if (!data || data.length === 0) {\n            console.warn(\"No posts privacy data found\");\n            return;\n          }\n          const map = {};\n          data.forEach(item => {\n            const postId = item.post_id.toString();\n            if (!map[postId]) {\n              map[postId] = [];\n            }\n            map[postId].push(item.username);\n          });\n          this.postsPrvMap = map;\n          console.log(\"postsPrvMap\", this.postsPrvMap);\n        }\n      } catch (error) {\n        console.error(\"Error fetching postsprv:\", error);\n      }\n    },\n    handleNotifClick() {\n      this.showNotifications = !this.showNotifications;\n      if (this.showNotifications) {\n        // Mark all unread notifications as read when opening the popup\n        this.notifications.forEach(notif => {\n          if (!notif.is_read) {\n            this.markNotificationAsRead(notif.id);\n          }\n        });\n      }\n    },\n    handleNotifClose(e) {\n      if (!this.showNotifications) return;\n      const popup = this.$refs.notifPopup;\n      const btn = this.$refs.notifBtn;\n      if (\n        (!popup || !btn) ||\n        (!popup.contains(e.target) && !btn.contains(e.target))\n      ) {\n        this.showNotifications = false;\n      }\n    },\n    async fetchNotifications() {\n      try {\n        const res = await fetch(\"http://localhost:8080/api/notifications\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (res.ok) {\n          const data = await res.json();\n          console.log(\"sassasaassa\", data);\n\n          // Ensure data is an array and map it safely\n          this.notifications = Array.isArray(data)\n            ? data.map(notif => ({\n              id: notif.id,\n              sender: notif.sender_username || 'Unknown',\n              text: notif.content || '',\n              time: notif.time || new Date().toISOString(),\n              type: notif.type || 'notification',\n              is_read: notif.is_read || false\n            }))\n            : [];\n        } else {\n          this.notifications = [];\n        }\n      } catch (e) {\n        console.error('Error fetching notifications:', e);\n        this.notifications = [];\n      }\n    },\n    async markNotificationAsRead(notificationId) {\n      console.log(notificationId);\n      \n      try {\n        // Find the notification first\n        const notification = this.notifications.find(n => n.id === notificationId);\n        if (!notification) return;\n\n        // Set a timeout to mark as read after 3 seconds\n        setTimeout(async () => {\n          try {\n            const res = await fetch(`http://localhost:8080/api/markasread`, {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              credentials: 'include',\n              body: JSON.stringify({\n                notificationId,\n                is_read: 1\n              })\n\n            });\n            console.log(\"res\", res);\n            if (res.ok) {\n              notification.is_read = true;\n            }\n          } catch (error) {\n            console.error('Error marking notification as read:', error);\n          }\n        }, 3000); // 3 seconds delay\n      } catch (error) {\n        console.error('Error marking notification as read:', error);\n      }\n    },\n    handleImageUpload(event, postId = null) {\n      const file = event.target.files[0];\n      if (file) {\n        if (postId) {\n          // Handle comment image\n          this.commentImages[postId] = {\n            file: file,\n            preview: URL.createObjectURL(file),\n            fileName: file.name\n          };\n        } else {\n          // Handle post image\n          this.image = file;\n          this.imageFileName = file.name;\n          this.imagePreview = URL.createObjectURL(file);\n        }\n      } else {\n        if (postId) {\n          // Clear comment image\n          this.commentImages[postId] = null;\n        } else {\n          // Clear post image\n          this.image = null;\n          this.imagePreview = null;\n          this.imageFileName = \"\";\n        }\n      }\n    },\n    formatTime(timestamp) {\n      if (!timestamp) return '';\n      const date = new Date(timestamp);\n      const now = new Date();\n      const diff = now - date;\n\n      // Less than 1 minute\n      if (diff < 60000) {\n        return 'just now';\n      }\n      // Less than 1 hour\n      if (diff < 3600000) {\n        const minutes = Math.floor(diff / 60000);\n        return `${minutes}m ago`;\n      }\n      // Less than 24 hours\n      if (diff < 86400000) {\n        const hours = Math.floor(diff / 3600000);\n        return `${hours}h ago`;\n      }\n      // Less than 7 days\n      if (diff < 604800000) {\n        const days = Math.floor(diff / 86400000);\n        return `${days}d ago`;\n      }\n      // Otherwise show the date\n      return date.toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      });\n    },\n    async fetchChatUsers() {\n      try {\n        const chatUsersRes = await fetch(\"http://localhost:8080/api/openchat\", {\n          method: \"GET\",\n          credentials: \"include\",\n        });\n        if (chatUsersRes.ok) {\n          const chatUsersData = await chatUsersRes.json();\n          console.log(\"Chat users data:\", chatUsersData);\n          if (!chatUsersData || chatUsersData.length === 0) {\n            return;\n          } else {\n            this.chatUsers = chatUsersData.map((user) => ({\n              id: user.id,\n              fullname: user.full_name,\n              name: user.username,\n              messages: [],\n              avatar: user.avatar \n                ? `http://localhost:8080/uploads/${user.avatar}`\n                : `https://api.dicebear.com/7.x/avataaars/svg?seed=${user.username}`,\n            }));\n          }\n        } else {\n          this.showNotification(\"Failed to fetch chat users\", \"error\");\n          console.error(\"Failed to fetch chat users\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching chat users:\", error);\n        this.showNotification(\"Error fetching chat users\", \"error\");\n      }\n    },\n\n    async handleChatClick() {\n      if (!this.isChatExpanded) {\n        await this.fetchChatUsers();\n      }\n      this.isChatExpanded = !this.isChatExpanded;\n    },\n  },\n  mounted() {\n    document.addEventListener('click', this.handleNotifClose);\n  },\n  beforeUnmount() {\n    document.removeEventListener('click', this.handleNotifClose);\n  },\n  computed: {\n    unreadNotificationCount() {\n      return this.notifications.filter(notif => !notif.is_read).length;\n    }\n  },\n};\n</script>\n\n<style scoped>\n/* Layout */\n.forum-layout {\n  display: flex;\n  min-height: 100vh;\n  background: #eaf1fb;\n  font-family: 'Inter', sans-serif;\n}\n\n/* Sidebar */\n.sidebar {\n  width: 70px;\n  background: #23263a;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 2rem 0 1rem 0;\n  border-radius: 1.5rem 0 0 1.5rem;\n  box-shadow: 2px 0 16px rgba(35, 38, 58, 0.08);\n}\n\n.sidebar-icons {\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n  width: 100%;\n  align-items: center;\n}\n\n.sidebar-icon {\n  width: 48px;\n  height: 48px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: 1rem;\n  color: #fff;\n  font-size: 1.5rem;\n  opacity: 0.7;\n  cursor: pointer;\n  transition: background 0.2s, opacity 0.2s;\n}\n\n.sidebar-icon.active,\n.sidebar-icon:hover {\n  background: #35395a;\n  opacity: 1;\n}\n\n/* Main Area */\n.main-area {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  padding: 2rem 2rem 2rem 1.5rem;\n  min-width: 0;\n}\n\n/* Top Avatar Bar */\n.avatar-bar {\n  width: 100%;\n  margin-bottom: 1.5rem;\n  overflow-x: auto;\n  padding-bottom: 0.5rem;\n}\n\n.avatar-list {\n  display: flex;\n  gap: 1.5rem;\n  align-items: center;\n  padding: 0.5rem 0;\n  min-width: min-content;\n}\n\n.avatar-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  cursor: pointer;\n  min-width: 56px;\n}\n\n.avatar-item img {\n  width: 48px;\n  height: 48px;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  box-shadow: 0 2px 8px rgba(35, 38, 58, 0.08);\n  margin-bottom: 0.25rem;\n  object-fit: cover;\n  transition: transform 0.2s;\n}\n\n.avatar-item img:hover {\n  transform: scale(1.08);\n}\n\n.avatar-name {\n  font-size: 0.8rem;\n  color: #23263a;\n  opacity: 0.7;\n  text-align: center;\n  max-width: 60px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.avatar-item.see-all .see-all-btn {\n  width: 48px;\n  height: 48px;\n  background: #f3f4f8;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  color: #23263a;\n  font-size: 0.9rem;\n  font-weight: 600;\n  border: 1px solid #e5e7eb;\n  margin-bottom: 0.25rem;\n  cursor: pointer;\n}\n\n/* Custom scrollbar for avatar bar */\n.avatar-bar::-webkit-scrollbar {\n  height: 6px;\n}\n\n.avatar-bar::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.avatar-bar::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 3px;\n}\n\n.avatar-bar::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n/* Create Post Card */\n.create-post-card {\n  display: flex;\n  align-items: flex-start;\n  background: #fff;\n  border-radius: 1.25rem;\n  box-shadow: 0 4px 24px rgba(35, 38, 58, 0.08);\n  padding: 1.5rem 2rem;\n  margin-bottom: 2rem;\n  gap: 1.5rem;\n}\n\n.create-post-card .profile-pic {\n  width: 56px;\n  height: 56px;\n  border-radius: 50%;\n  object-fit: cover;\n  margin-top: 0.5rem;\n}\n\n.create-post-form {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.75rem;\n}\n\n.create-post-form input,\n.create-post-form textarea {\n\n  border: none;\n  background: #f3f4f8;\n  border-radius: 0.75rem;\n  padding: 0.9rem 1.2rem;\n  font-size: 1rem;\n  margin-bottom: 0.2rem;\n  resize: none;\n}\n\n.create-post-form textarea {\n  min-height: 70px;\n  resize: vertical;\n}\n\n.create-post-row {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  gap: 1rem;\n}\n\n\n.status-select select {\n  background: #f3f4f8;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.3rem 1rem;\n  font-size: 0.95rem;\n  color: #23263a;\n}\n\n.allowed-users-select {\n  display: flex;\n  gap: 0.7rem;\n  flex-wrap: wrap;\n  margin-bottom: 0.5rem;\n}\n\n.allowed-user-pill {\n  display: flex;\n  align-items: center;\n  background: #f3f4f8;\n  border-radius: 2rem;\n  padding: 0.25rem 1rem 0.25rem 0.4rem;\n  font-size: 0.97rem;\n  color: #23263a;\n  cursor: pointer;\n  gap: 0.5rem;\n  box-shadow: 0 1px 4px rgba(35, 38, 58, 0.06);\n  border: 1.5px solid #e5e7eb;\n  transition: border 0.18s, box-shadow 0.18s, background 0.18s;\n  position: relative;\n}\n\n.allowed-user-pill:hover,\n.allowed-user-pill:focus-within {\n  border: 1.5px solid #4f46e5;\n  background: #e0e7ff;\n  box-shadow: 0 2px 8px rgba(79, 70, 229, 0.10);\n}\n\n.allowed-user-pill input[type=\"checkbox\"] {\n  display: none;\n}\n\n.custom-checkbox {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 22px;\n  height: 22px;\n  margin-right: 0.1rem;\n}\n\n.allowed-user-avatar {\n  width: 28px;\n  height: 28px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 1.5px solid #e5e7eb;\n  background: #fff;\n}\n\n.allowed-user-name {\n  font-weight: 500;\n  color: #23263a;\n  font-size: 0.97rem;\n  margin-left: 0.1rem;\n}\n\n.post-btn {\n  background: linear-gradient(90deg, #23263a 60%, #4f46e5 100%);\n  color: #fff;\n  border: none;\n  border-radius: 0.7rem;\n  padding: 0.7rem 1.5rem;\n  font-size: 1rem;\n  font-weight: 600;\n  cursor: pointer;\n  margin-top: 0.5rem;\n  align-self: flex-end;\n  transition: background 0.2s;\n}\n\n.post-btn:hover {\n  background: linear-gradient(90deg, #4f46e5 60%, #23263a 100%);\n}\n\n/* Posts Grid */\n.posts-grid {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1.5rem;\n  margin-top: 1.5rem;\n  align-items: flex-start; /* Ensure items align at the top */\n  justify-content: center; /* Center items if there's extra horizontal space */\n}\n\n.post-card {\n  background: #fff;\n  border-radius: 1.25rem;\n  box-shadow: 0 4px 24px rgba(35, 38, 58, 0.08);\n  padding: 1.2rem 1.2rem 1rem 1.2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.7rem;\n  flex: 0 0 calc(33.33% - 1rem); /* Prevent growing/shrinking, base width for 3 columns */\n  min-width: 280px; /* Allow shrinking down to this */\n  overflow-wrap: break-word;\n  word-wrap: break-word;\n  word-break: break-word;\n  height: auto; /* Ensure height is based on content */\n}\n\n.post-image img {\n  width: 100%;\n  height: 180px;\n  object-fit: cover;\n  border-radius: 0.8rem;\n  margin-bottom: 0.7rem;\n}\n\n.post-header {\n  display: flex;\n  align-items: center;\n  gap: 0.7rem;\n}\n\n.post-author-pic {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.post-title {\n  font-size: 1.1rem;\n  color: #23263a;\n  font-weight: 600;\n  margin: 0.2rem 0;\n}\n\n.post-content {\n  color: #4b5563;\n  font-size: 0.98rem;\n  margin-bottom: 0.2rem;\n  word-wrap: break-word;\n  white-space: pre-wrap;\n  overflow-wrap: break-word;\n  max-width: 100%;\n  line-height: 1.5;\n  height: auto; /* Allow height to adjust to content */\n}\n\n.category-tag {\n  background: #e0e7ff;\n  color: #4f46e5;\n  padding: 0.2rem 0.6rem;\n  border-radius: 0.4rem;\n  font-size: 0.8rem;\n  font-weight: 500;\n}\n\n.post-actions {\n  display: flex;\n  gap: 1.2rem;\n  margin-top: 0.2rem;\n}\n\n.icon-btn {\n  font-size: 1.2rem;\n  color: #b0b3c6;\n  cursor: pointer;\n  transition: color 0.2s;\n}\n\n.icon-btn:hover {\n  color: #4f46e5;\n}\n\n.no-posts {\n  color: #b0b3c6;\n  text-align: center;\n  font-size: 1.1rem;\n  grid-column: 1/-1;\n}\n\n/* Right Sidebar */\n.rightbar {\n  width: 400px;\n  background: #fff;\n  border-radius: 0 1.5rem 1.5rem 0;\n  box-shadow: -2px 0 16px rgba(35, 38, 58, 0.08);\n  padding: 2rem 1.5rem 2rem 1.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n\n.invite-group-btn {\n  background: #f3f4f8;\n  color: #23263a;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.3rem 0.6rem;\n  margin-right: 0.5rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  transition: background 0.2s, color 0.2s;\n  position: relative;\n}\n\n.sidebar-icon[title=\"Notifications\"] {\n  position: relative;\n}\n\n.notif-badge {\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  background: #ef4444;\n  color: white;\n  border-radius: 50%;\n  width: 18px;\n  height: 18px;\n  font-size: 0.75rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: 600;\n  border: 2px solid #fff;\n  z-index: 1;\n}\n\n.notif-btn:hover,\n.invite-group-btn:hover {\n  background: #e0e7ff;\n  color: #4f46e5;\n}\n\n.logout-btn {\n  display: flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: #f3f4f8;\n  color: #23263a;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.4rem 1rem;\n  font-size: 1rem;\n  font-weight: 500;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.logout-btn:hover {\n  background: #e5e7eb;\n}\n\n.create-group-btn {\n  background: #4f46e5;\n  color: #fff;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.2rem 0.5rem;\n  margin-right: 0.5rem;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  transition: background 0.2s;\n}\n\n.create-group-btn:hover {\n  background: #23263a;\n}\n\n.groups-header {\n  display: flex;\n  align-items: center;\n  gap: 0.3rem;\n  justify-content: space-between;\n}\n\n.groups-header span {\n  flex: 1;\n}\n\n.groups-header .see-all-link {\n  flex: unset;\n}\n\n.groups-section {\n  margin-bottom: 2rem;\n  height: 300px;\n  overflow-y: auto;\n  padding-right: 10px;\n}\n\n.groups-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.group-list-item {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  background: #f3f4f8;\n  border-radius: 0.7rem;\n  padding: 0.7rem 1rem;\n  gap: 0.7rem;\n}\n\n.group-info {\n  display: flex;\n  align-items: center;\n  gap: 0.7rem;\n}\n\n.group-avatar {\n  font-size: 1.5rem;\n  color: #4f46e5;\n  background: #e0e7ff;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.group-details {\n  display: flex;\n  flex-direction: column;\n}\n\n.group-title {\n  font-size: 1rem;\n  font-weight: 600;\n  color: #23263a;\n}\n\n.group-desc {\n  font-size: 0.85rem;\n  color: #6b7280;\n  max-width: 120px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n.pending-btn {\n  background: #ad8f0a;\n}\n\n.follow-btn,\n.pending-btn {\n  color: #fff;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.4rem 1.1rem;\n  font-size: 0.95rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.follow-btn {\n  background: #4f46e5;\n}\n\n.follow-btn:hover {\n  background: #23263a;\n}\n\n.followed-btn {\n  background: #e5e7eb;\n  color: #4f46e5;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.4rem 1.1rem;\n  font-size: 0.95rem;\n  font-weight: 600;\n  cursor: pointer;\n}\n\n.users-section {\n  margin-top: 2rem;\n  height: 300px;\n  overflow-y: auto;\n  padding-right: 10px;\n}\n\n.users-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 1rem;\n  font-size: 1.1rem;\n  font-weight: 600;\n  color: #23263a;\n}\n\n.users-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.user-list-item {\n  display: flex;\n  align-items: center;\n  gap: 0.7rem;\n  background: #f3f4f8;\n  border-radius: 0.7rem;\n  padding: 0.7rem 1rem;\n}\n\n.mini-profile-pic {\n  width: 36px;\n  height: 36px;\n  border-radius: 50%;\n  object-fit: cover;\n  cursor: pointer;\n}\n\n.user-name {\n  font-size: 1rem;\n  color: #23263a;\n  font-weight: 500;\n  cursor: pointer;\n}\n\n.modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  background: rgba(35, 38, 58, 0.45);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  z-index: 2000;\n  transition: background 0.3s;\n}\n\n.create-group-modal {\n  background: #fff;\n  border-radius: 1.2rem;\n  box-shadow: 0 8px 32px rgba(35, 38, 58, 0.18);\n  padding: 2.5rem 2.5rem 2rem 2.5rem;\n  min-width: 340px;\n  max-width: 95vw;\n  animation: modalPopIn 0.25s cubic-bezier(.4, 2, .6, 1) both;\n}\n\n@keyframes modalPopIn {\n  0% {\n    transform: scale(0.95) translateY(30px);\n    opacity: 0;\n  }\n\n  100% {\n    transform: scale(1) translateY(0);\n    opacity: 1;\n  }\n}\n\n.create-group-modal h3 {\n  color: #4f46e5;\n  margin-bottom: 1.5rem;\n  text-align: center;\n  font-size: 1.3rem;\n  font-weight: 700;\n}\n\n.create-group-modal .form-group label {\n  color: #23263a;\n  font-weight: 600;\n}\n\n.create-group-modal .form-group input,\n.create-group-modal .form-group textarea {\n  background: #f3f4f8;\n  border: none;\n  border-radius: 0.7rem;\n  padding: 0.8rem 1.1rem;\n  font-size: 1rem;\n  margin-bottom: 0.7rem;\n  width: 100%;\n  box-sizing: border-box;\n}\n\n.create-group-modal .form-group textarea {\n  min-height: 80px;\n  resize: vertical;\n}\n\n.create-group-modal .modal-buttons {\n  display: flex;\n  justify-content: flex-end;\n  gap: 1rem;\n  margin-top: 1.2rem;\n}\n\n.create-group-modal .submit-btn {\n  background: #4f46e5;\n  color: #fff;\n  padding: 0.7rem 1.5rem;\n  border: none;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.create-group-modal .submit-btn:hover {\n  background: #23263a;\n}\n\n.create-group-modal .cancel-btn {\n  background: #e5e7eb;\n  color: #23263a;\n  padding: 0.7rem 1.5rem;\n  border: none;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.create-group-modal .cancel-btn:hover {\n  background: #cbd5e1;\n}\n\n/* Comments Section */\n.comments-section {\n  margin-top: 1.1rem;\n  padding: 1.1rem;\n  background: #f8fafc;\n  border-radius: 0.7rem;\n  border: 1px solid #e5e7eb;\n}\n\n.no-comments {\n  text-align: center;\n  color: #6b7280;\n  font-size: 0.95rem;\n  padding: 1rem 0;\n  background: #fff;\n  border-radius: 0.5rem;\n  border: 1px dashed #e5e7eb;\n}\n\n.comment {\n  background: #fff;\n  border-radius: 0.7rem;\n  padding: 1rem;\n  margin-bottom: 0.7rem;\n  border: 1px solid #e5e7eb;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.comment:hover {\n  transform: translateY(-1px);\n  box-shadow: 0 2px 8px rgba(35, 38, 58, 0.06);\n}\n\n.comment-header {\n  display: flex;\n  align-items: center;\n  gap: 0.7rem;\n  margin-bottom: 0.5rem;\n}\n\n.comment-author-pic {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 2px solid #e5e7eb;\n}\n\n.comment-header h5 {\n  color: #23263a;\n  font-size: 0.95rem;\n  margin: 0;\n  font-weight: 600;\n}\n\n.comment-timestamp {\n  color: #6b7280;\n  font-size: 0.85rem;\n  margin: 0;\n}\n\n.comment-content {\n  color: #4b5563;\n  font-size: 0.95rem;\n  line-height: 1.5;\n  margin: 0.5rem 0;\n}\n\n.comment-image {\n  max-width: 100%;\n  max-height: 300px;\n  border-radius: 0.5rem;\n  margin-top: 0.7rem;\n  border: 1px solid #e5e7eb;\n}\n\n.comment-form {\n  display: flex;\n  flex-direction: column;\n  gap: 0.7rem;\n  margin-top: 1rem;\n  background: #fff;\n  padding: 1rem;\n  border-radius: 0.7rem;\n  border: 1px solid #e5e7eb;\n}\n\n.comment-input-row {\n  display: flex;\n  align-items: flex-end;\n  gap: 0.7rem;\n}\n\n.comment-form textarea {\n  flex: 1;\n  padding: 0.8rem 1rem;\n  border: 1px solid #e5e7eb;\n  border-radius: 0.7rem;\n  font-size: 0.95rem;\n  background: #f8fafc;\n  min-height: 42px;\n  resize: vertical;\n  transition: border-color 0.2s, background 0.2s;\n}\n\n.comment-form textarea:focus {\n  border-color: #4f46e5;\n  background: #fff;\n  outline: none;\n}\n\n.comment-form input[type=\"file\"] {\n  display: none;\n}\n\n.comment-form .file-upload-label {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: #f3f4f8;\n  border-radius: 0.5rem;\n  padding: 0.5rem 0.8rem;\n  font-size: 0.9rem;\n  color: #23263a;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.comment-form .file-upload-label:hover {\n  background: #e0e7ff;\n}\n\n.comment-form .file-upload-label svg {\n  width: 18px;\n  height: 18px;\n  color: #4f46e5;\n}\n\n.comment-submit-btn {\n  background: #4f46e5;\n  color: #fff;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.5rem 0.8rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.comment-submit-btn:hover {\n  background: #23263a;\n}\n\n.comment-error {\n  color: #ef4444;\n  font-size: 0.9rem;\n  margin-top: 0.3rem;\n  padding: 0.5rem;\n  background: #fee2e2;\n  border-radius: 0.5rem;\n  border: 1px solid #fecaca;\n}\n\n.group-clickable {\n  cursor: pointer;\n  transition: background 0.18s;\n}\n\n.group-clickable:hover {\n  background: #e0e7ff;\n}\n\n/* Chat Floating Action Button */\n.chat-fab {\n  position: fixed;\n  bottom: 2.2rem;\n  right: 2.2rem;\n  z-index: 3000;\n  background: #4f46e5;\n  color: #fff;\n  border: none;\n  border-radius: 50%;\n  width: 60px;\n  height: 60px;\n  box-shadow: 0 4px 16px rgba(35, 38, 58, 0.18);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 2rem;\n  cursor: pointer;\n  transition: background 0.2s, box-shadow 0.2s;\n}\n\n.chat-fab:hover {\n  background: #23263a;\n  box-shadow: 0 8px 32px rgba(35, 38, 58, 0.22);\n}\n\n/* Chat Modal */\n.chat-modal-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background: rgba(35, 38, 58, 0.25);\n  z-index: 4000;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.chat-modal {\n  background: #fff;\n  border-radius: 1.1rem;\n  box-shadow: 0 8px 32px rgba(35, 38, 58, 0.18);\n  width: 370px;\n  max-width: 95vw;\n  padding: 1.2rem 1.2rem 1.2rem 1.2rem;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  animation: modalPopIn 0.22s cubic-bezier(.4, 2, .6, 1) both;\n}\n\n.chat-modal-header {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-size: 1.2rem;\n  font-weight: 600;\n  color: #4f46e5;\n  margin-bottom: 0.2rem;\n}\n\n.chat-modal-close {\n  background: none;\n  border: none;\n  font-size: 2rem;\n  color: #b0b3c6;\n  cursor: pointer;\n  transition: color 0.2s;\n}\n\n.chat-modal-close:hover {\n  color: #ef4444;\n}\n\n.chat-users-list {\n  background: #f8fafc;\n  border-radius: 0.7rem;\n  padding: 0.7rem 0.5rem;\n  margin-bottom: 0.2rem;\n}\n\n.chat-users-title {\n  font-size: 1rem;\n  color: #23263a;\n  font-weight: 600;\n  margin-bottom: 0.5rem;\n}\n\n.chat-users-list ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  max-height: 120px;\n  overflow-y: auto;\n}\n\n.chat-users-list li {\n  display: flex;\n  align-items: center;\n  gap: 0.7rem;\n  padding: 0.4rem 0.2rem;\n  border-radius: 0.5rem;\n  cursor: pointer;\n  transition: background 0.18s;\n}\n\n.chat-users-list li.selected,\n.chat-users-list li:hover {\n  background: #e0e7ff;\n}\n\n.chat-user-avatar {\n  width: 32px;\n  height: 32px;\n  border-radius: 50%;\n  object-fit: cover;\n}\n\n.chat-messages-area {\n  background: #f8fafc;\n  border-radius: 0.7rem;\n  padding: 0.7rem 0.5rem;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n}\n\n.chat-messages-title {\n  font-size: 1rem;\n  color: #4f46e5;\n  font-weight: 600;\n  margin-bottom: 0.3rem;\n}\n\n.chat-messages-list {\n  flex: 1;\n  max-height: 180px;\n  overflow-y: auto;\n  display: flex;\n  flex-direction: column;\n  gap: 0.4rem;\n}\n\n.chat-msg {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  background: #fff;\n  border-radius: 0.5rem;\n  padding: 0.4rem 0.7rem;\n  font-size: 0.97rem;\n  box-shadow: 0 1px 4px rgba(35, 38, 58, 0.06);\n  max-width: 80%;\n}\n\n.chat-msg.self {\n  align-self: flex-end;\n  background: #4f46e5;\n  color: #fff;\n}\n\n.chat-msg.other {\n  align-self: flex-start;\n  background: #e5e7eb;\n  color: #23263a;\n}\n\n.chat-msg-time {\n  font-size: 0.75rem;\n  color: #b0b3c6;\n  margin-top: 0.1rem;\n  align-self: flex-end;\n}\n\n.chat-send-form {\n  display: flex;\n  gap: 0.4rem;\n  margin-top: 0.3rem;\n}\n\n.chat-send-form input {\n  flex: 1;\n  padding: 0.5rem 0.8rem;\n  border: 1px solid #e5e7eb;\n  border-radius: 0.5rem;\n  font-size: 0.97rem;\n  background: #fff;\n}\n\n.chat-send-btn {\n  background: #4f46e5;\n  color: #fff;\n  border: none;\n  border-radius: 0.5rem;\n  padding: 0.4rem 0.7rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  transition: background 0.2s;\n}\n\n.chat-send-btn:hover {\n  background: #23263a;\n}\n\n.chat-no-user {\n  color: #b0b3c6;\n  text-align: center;\n  font-size: 1rem;\n  padding: 1.2rem 0;\n}\n\n/* Custom scrollbar */\n.groups-section::-webkit-scrollbar {\n  width: 6px;\n}\n\n.groups-section::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.groups-section::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 3px;\n}\n\n.groups-section::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n/* Custom scrollbar for users section */\n.users-section::-webkit-scrollbar {\n  width: 6px;\n}\n\n.users-section::-webkit-scrollbar-track {\n  background: #f1f1f1;\n  border-radius: 3px;\n}\n\n.users-section::-webkit-scrollbar-thumb {\n  background: #cbd5e1;\n  border-radius: 3px;\n}\n\n.users-section::-webkit-scrollbar-thumb:hover {\n  background: #94a3b8;\n}\n\n.notif-popup {\n  position: absolute;\n  top: 70px;\n  left: 80px;\n  width: 350px;\n  background: #fff;\n  border-radius: 1.1rem;\n  box-shadow: 0 8px 32px rgba(35, 38, 58, 0.18);\n  z-index: 5000;\n  padding: 0.5rem 0 0.5rem 0;\n  animation: modalPopIn 0.22s cubic-bezier(.4, 2, .6, 1) both;\n}\n\n.notif-popup-header {\n  font-size: 1.1rem;\n  font-weight: 700;\n  color: #4f46e5;\n  padding: 1rem 1.5rem 0.5rem 1.5rem;\n  border-bottom: 1px solid #e5e7eb;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.notif-list {\n  list-style: none;\n  margin: 0;\n  padding: 0.5rem 0;\n  max-height: 400px;\n  overflow-y: auto;\n}\n\n.notif-item {\n  display: flex;\n  align-items: flex-start;\n  gap: 0.7rem;\n  padding: 0.8rem 1.5rem;\n  font-size: 0.98rem;\n  color: #23263a;\n  border-bottom: 1px solid #f3f4f8;\n  transition: background 0.18s;\n  position: relative;\n  cursor: pointer;\n}\n\n.notif-item:last-child {\n  border-bottom: none;\n}\n\n.notif-item:hover {\n  background: #f8fafc;\n}\n\n.notif-avatar img {\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  object-fit: cover;\n  border: 2px solid #e5e7eb;\n  flex-shrink: 0;\n}\n\n.notif-text {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.2rem;\n}\n\n.notif-text b {\n  color: #4f46e5;\n  font-weight: 600;\n}\n\n.notif-text span {\n  color: #4b5563;\n  line-height: 1.4;\n}\n\n.notif-time {\n  font-size: 0.85rem;\n  color: #6b7280;\n  margin-left: 0.5rem;\n  white-space: nowrap;\n}\n\n.notif-item.empty {\n  color: #b0b3c6;\n  text-align: center;\n  justify-content: center;\n  font-size: 1rem;\n  padding: 2rem 1.5rem;\n}\n\n.notif-item.unread {\n  background: #f0f7ff;\n  border-left: 3px solid #4f46e5;\n}\n\n.notif-item.unread::after {\n  content: '';\n  position: absolute;\n  top: 50%;\n  right: 1rem;\n  transform: translateY(-50%);\n  width: 8px;\n  height: 8px;\n  background: #4f46e5;\n  border-radius: 50%;\n}\n\n.owner-badge {\n  font-size: 0.75rem;\n  color: #4f46e5;\n  background: #e0e7ff;\n  padding: 0.1rem 0.4rem;\n  border-radius: 0.3rem;\n  margin-top: 0.2rem;\n  display: inline-block;\n}\n\n.comment-image {\n  max-width: 100%;\n  border-radius: 0.5rem;\n  margin-top: 0.5rem;\n}\n\n.create-post-form input[type=\"file\"] {\n  display: none;\n}\n\n.create-post-form .file-upload-label {\n  display: inline-flex;\n  align-items: center;\n  gap: 0.5rem;\n  background: #f3f4f8;\n  border-radius: 0.75rem;\n  padding: 0.7rem 1.2rem;\n  font-size: 0.95rem;\n  color: #23263a;\n  cursor: pointer;\n  transition: background 0.2s;\n  margin-bottom: 0.5rem;\n}\n\n.create-post-form .file-upload-label:hover {\n  background: #e0e7ff;\n}\n\n.create-post-form .file-upload-label svg {\n  width: 20px;\n  height: 20px;\n  color: #4f46e5;\n}\n\n.create-post-form .image-preview {\n  max-width: 200px;\n  max-height: 200px;\n  border-radius: 0.75rem;\n  margin-top: 0.5rem;\n  display: block;\n}\n\n.file-name-display {\n  font-size: 0.9rem;\n  color: #4f46e5;\n  background: #e0e7ff;\n  padding: 0.5rem 0.8rem;\n  border-radius: 0.5rem;\n  margin-top: 0.5rem;\n  display: inline-block;\n}\n\n\n@media (max-width: 768px) {\n  .post-card {\n    flex-basis: 100%; /* Full width on mobile */\n    max-width: 100%;\n  }\n}\n\n@media (max-width: 900px) {\n  .forum-layout {\n    flex-direction: column;\n  }\n\n  .sidebar {\n    flex-direction: row;\n    width: 100vw;\n    height: 60px;\n    border-radius: 0 0 1.5rem 1.5rem;\n    padding: 0 1rem;\n    box-shadow: 0 2px 16px rgba(35, 38, 58, 0.08);\n  }\n\n  .sidebar-icons {\n    flex-direction: row;\n    gap: 2rem;\n    width: 100%;\n    justify-content: center;\n  }\n\n  .main-area {\n    padding: 1rem 0.5rem;\n  }\n\n  .rightbar {\n    width: 100vw;\n    border-radius: 0 0 1.5rem 1.5rem;\n    box-shadow: 0 -2px 16px rgba(35, 38, 58, 0.08);\n    padding: 1.2rem 0.7rem;\n    margin-top: 1rem;\n  }\n}\n\n@media (max-width: 600px) {\n  .main-area {\n    padding: 0.5rem 0.2rem;\n  }\n\n  .create-post-card {\n    flex-direction: column;\n    padding: 1rem 0.7rem;\n    gap: 0.7rem;\n  }\n\n  .posts-grid {\n    grid-template-columns: 1fr;\n    gap: 1rem;\n  }\n\n  .rightbar {\n    padding: 0.7rem 0.2rem;\n  }\n\n  .comment-input-row {\n    flex-direction: column;\n    align-items: stretch;\n    gap: 0.5rem;\n  }\n\n  .comment-form .file-upload-label {\n    width: 100%;\n    justify-content: center;\n  }\n\n  .comment-submit-btn {\n    width: 100%;\n    padding: 0.7rem;\n  }\n}\n\n@media (min-width: 768px) {\n  .posts-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n    gap: 1.5rem;\n  }\n}\n\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}