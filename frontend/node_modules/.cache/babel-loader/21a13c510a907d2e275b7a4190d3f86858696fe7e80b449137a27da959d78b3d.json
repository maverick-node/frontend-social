{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelSelect as _vModelSelect, withDirectives as _withDirectives, vModelText as _vModelText, withKeys as _withKeys } from \"vue\";\nconst _hoisted_1 = {\n  class: \"user-selection\"\n};\nconst _hoisted_2 = [\"value\"];\nconst _hoisted_3 = {\n  class: \"chat-container\"\n};\nconst _hoisted_4 = {\n  class: \"messages\",\n  ref: \"messagesContainer\"\n};\nconst _hoisted_5 = {\n  class: \"input-container\"\n};\nconst _hoisted_6 = [\"disabled\"];\nconst _hoisted_7 = [\"disabled\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h1\", null, \"WebSocket\", -1 /* HOISTED */)), _createElementVNode(\"div\", _hoisted_1, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"receiver\"\n  }, \"Select User to Message:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"select\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.receiver = $event),\n    id: \"receiver\"\n  }, [_cache[4] || (_cache[4] = _createElementVNode(\"option\", {\n    value: \"\"\n  }, \"Select a user...\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.availableUsers, user => {\n    return _openBlock(), _createElementBlock(\"option\", {\n      key: user.username,\n      value: user.username\n    }, _toDisplayString(user.username), 9 /* TEXT, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), [[_vModelSelect, $data.receiver]])]), _createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: \"message\"\n    }, _toDisplayString(msg), 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_5, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.message = $event),\n    onKeyup: _cache[2] || (_cache[2] = _withKeys((...args) => $options.sendMessage && $options.sendMessage(...args), [\"enter\"])),\n    placeholder: \"Type a message...\",\n    disabled: !$data.receiver\n  }, null, 40 /* PROPS, NEED_HYDRATION */, _hoisted_6), [[_vModelText, $data.message]]), _createElementVNode(\"button\", {\n    onClick: _cache[3] || (_cache[3] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    disabled: !$data.receiver || !$data.message.trim()\n  }, \"Send\", 8 /* PROPS */, _hoisted_7)])])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_createElementVNode","_hoisted_1","for","_cache","$event","$data","receiver","id","value","_Fragment","_renderList","availableUsers","user","key","username","_hoisted_2","_hoisted_3","_hoisted_4","messages","msg","index","_hoisted_5","message","onKeyup","_withKeys","args","$options","sendMessage","placeholder","disabled","_hoisted_6","onClick","trim","_hoisted_7"],"sources":["/Users/apple/Desktop/social-1/social-network/frontend/src/components/WebSocket.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>WebSocket</h1>\n        <div class=\"user-selection\">\n            <label for=\"receiver\">Select User to Message:</label>\n            <select v-model=\"receiver\" id=\"receiver\">\n                <option value=\"\">Select a user...</option>\n                <option v-for=\"user in availableUsers\" :key=\"user.username\" :value=\"user.username\">\n                    {{ user.username }}\n                </option>\n            </select>\n        </div>\n        <div class=\"chat-container\">\n            <div class=\"messages\" ref=\"messagesContainer\">\n                <div v-for=\"(msg, index) in messages\" :key=\"index\" class=\"message\">\n                    {{ msg }}\n                </div>\n            </div>\n            <div class=\"input-container\">\n                <input \n                    v-model=\"message\" \n                    @keyup.enter=\"sendMessage\" \n                    placeholder=\"Type a message...\" \n                    :disabled=\"!receiver\"\n                />\n                <button @click=\"sendMessage\" :disabled=\"!receiver || !message.trim()\">Send</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchInfo } from '../api/getInfo.js';\n\nexport default {\n    data() {\n        return {\n            socket: null,\n            message: '',\n            receiver: '',\n            messages: [],\n            availableUsers: [],\n            currentMessage: {\n                type: 'message',\n                message: '',\n                receiver: '',\n                username: ''\n            }\n        };\n    },\n    \n    async mounted() {\n        // Get current user info\n        try {\n            const userInfo = await fetchInfo();\n            this.currentMessage.username = userInfo.Username;\n            console.log(\"Current user:\", userInfo.Username);\n            await this.fetchAvailableUsers();\n        } catch (error) {\n            console.error(\"Error fetching user info:\", error);\n        }\n\n        // Use native WebSocket API\n        this.socket = new WebSocket(\"ws://localhost:8080/ws\");\n\n        this.socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            console.log(\"Received message:\", data);\n            \n            if (data.error) {\n                this.messages.push(`Error: ${data.error}`);\n            } else {\n                this.messages.push(`${data.username}: ${data.message}`);\n            }\n            this.scrollToBottom();\n        };\n\n        this.socket.onopen = () => {\n            console.log(\"WebSocket connected\");\n            this.messages.push(\"Connected to chat server\");\n        };\n\n        this.socket.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n            this.messages.push(\"Error: WebSocket connection failed\");\n        };\n\n        this.socket.onclose = () => {\n            console.log(\"WebSocket disconnected\");\n            this.messages.push(\"Disconnected from server\");\n        };\n    },\n    methods: {\n        async fetchAvailableUsers() {\n            try {\n                const response = await fetch('http://localhost:8080/api/openchat', {\n                    credentials: 'include'\n                });\n                if (response.ok) {\n                    this.availableUsers = await response.json();\n                    console.log(\"Available users:\", this.availableUsers);\n                } else {\n                    console.error('Failed to fetch available users');\n                }\n            } catch (error) {\n                console.error('Error fetching available users:', error);\n            }\n        },\n        sendMessage() {\n            if (this.socket && this.message.trim() !== \"\" && this.receiver) {\n                if (this.socket.readyState !== WebSocket.OPEN) {\n                    this.messages.push(\"Error: WebSocket is not connected\");\n                    return;\n                }\n\n                this.currentMessage.type = \"message\";\n                this.currentMessage.receiver = this.receiver;\n                this.currentMessage.message = this.message;\n                \n                console.log(\"Sending message:\", this.currentMessage);\n                try {\n                    this.socket.send(JSON.stringify(this.currentMessage));\n                    this.messages.push(`Sent to ${this.receiver}: ${this.message}`);\n                    this.message = \"\";\n                    this.scrollToBottom();\n                } catch (error) {\n                    console.error(\"Error sending message:\", error);\n                    this.messages.push(\"Error: Failed to send message\");\n                }\n            } else if (!this.receiver) {\n                this.messages.push(\"Error: Please select a receiver first\");\n            }\n        },\n        scrollToBottom() {\n            this.$nextTick(() => {\n                const container = this.$refs.messagesContainer;\n                if (container) {\n                    container.scrollTop = container.scrollHeight;\n                }\n            });\n        }\n    },\n};\n</script>\n\n<style scoped>\n.chat-container {\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    margin: 20px 0;\n}\n\n.messages {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 10px;\n}\n\n.message {\n    margin: 5px 0;\n    padding: 8px;\n    border-radius: 4px;\n    background-color: #f0f0f0;\n}\n\n.input-container {\n    display: flex;\n    padding: 10px;\n    border-top: 1px solid #ccc;\n}\n\n.input-container input {\n    flex-grow: 1;\n    margin-right: 10px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.input-container button {\n    padding: 8px 16px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.input-container button:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n\n.user-selection {\n    margin: 20px 0;\n}\n\n.user-selection select {\n    padding: 8px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    min-width: 200px;\n}\n</style>"],"mappings":";;EAGaA,KAAK,EAAC;AAAgB;mBAHnC;;EAYaA,KAAK,EAAC;AAAgB;;EAClBA,KAAK,EAAC,UAAU;EAACC,GAAG,EAAC;;;EAKrBD,KAAK,EAAC;AAAiB;mBAlBxC;mBAAA;;uBACIE,mBAAA,CA2BM,c,0BA1BFC,mBAAA,CAAkB,YAAd,WAAS,sBACbA,mBAAA,CAQM,OARNC,UAQM,G,0BAPFD,mBAAA,CAAqD;IAA9CE,GAAG,EAAC;EAAU,GAAC,yBAAuB,sB,gBAC7CF,mBAAA,CAKS;IAVrB,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAK6BC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IAAEG,EAAE,EAAC;gCAC1BP,mBAAA,CAA0C;IAAlCQ,KAAK,EAAC;EAAE,GAAC,kBAAgB,uB,kBACjCT,mBAAA,CAESU,SAAA,QATzBC,WAAA,CAOuCL,KAAA,CAAAM,cAAc,EAAtBC,IAAI;yBAAnBb,mBAAA,CAES;MAF+Bc,GAAG,EAAED,IAAI,CAACE,QAAQ;MAAGN,KAAK,EAAEI,IAAI,CAACE;wBAClEF,IAAI,CAACE,QAAQ,wBARpCC,UAAA;2EAK6BV,KAAA,CAAAC,QAAQ,E,KAO7BN,mBAAA,CAeM,OAfNgB,UAeM,GAdFhB,mBAAA,CAIM,OAJNiB,UAIM,I,kBAHFlB,mBAAA,CAEMU,SAAA,QAhBtBC,WAAA,CAc4CL,KAAA,CAAAa,QAAQ,EAdpD,CAc6BC,GAAG,EAAEC,KAAK;yBAAvBrB,mBAAA,CAEM;MAFiCc,GAAG,EAAEO,KAAK;MAAEvB,KAAK,EAAC;wBAClDsB,GAAG;0DAGdnB,mBAAA,CAQM,OARNqB,UAQM,G,gBAPFrB,mBAAA,CAKE;IAxBlB,uBAAAG,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAoB6BC,KAAA,CAAAiB,OAAO,GAAAlB,MAAA;IACfmB,OAAK,EAAApB,MAAA,QAAAA,MAAA,MArB1BqB,SAAA,KAAAC,IAAA,KAqBkCC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IACzBG,WAAW,EAAC,mBAAmB;IAC9BC,QAAQ,GAAGxB,KAAA,CAAAC;2CAvBhCwB,UAAA,I,cAoB6BzB,KAAA,CAAAiB,OAAO,E,GAKpBtB,mBAAA,CAAmF;IAA1E+B,OAAK,EAAA5B,MAAA,QAAAA,MAAA,UAAAsB,IAAA,KAAEC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;IAAGI,QAAQ,GAAGxB,KAAA,CAAAC,QAAQ,KAAKD,KAAA,CAAAiB,OAAO,CAACU,IAAI;KAAI,MAAI,iBAzB1FC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}