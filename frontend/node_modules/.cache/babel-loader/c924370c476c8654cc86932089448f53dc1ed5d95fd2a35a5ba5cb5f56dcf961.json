{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { fetchInfo } from '../api/getInfo.js';\nexport default {\n  data() {\n    return {\n      socket: null,\n      message: '',\n      receiver: '',\n      messages: [],\n      availableUsers: [],\n      currentMessage: {\n        type: 'message',\n        message: '',\n        receiver: '',\n        username: ''\n      }\n    };\n  },\n  async mounted() {\n    // Get current user info\n    try {\n      const userInfo = await fetchInfo();\n      this.currentMessage.username = userInfo.Username;\n      console.log(\"Current user:\", userInfo.Username);\n      await this.fetchAvailableUsers();\n    } catch (error) {\n      console.error(\"Error fetching user info:\", error);\n    }\n\n    // Use native WebSocket API\n    this.socket = new WebSocket(\"ws://localhost:8080/ws\");\n    this.socket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      console.log(\"Received message:\", data);\n      if (data.error) {\n        this.messages.push(`Error: ${data.error}`);\n      } else {\n        this.messages.push(`${data.username}: ${data.message}`);\n      }\n      this.scrollToBottom();\n    };\n    this.socket.onopen = () => {\n      console.log(\"WebSocket connected\");\n      this.messages.push(\"Connected to chat server\");\n    };\n    this.socket.onerror = error => {\n      console.error(\"WebSocket error:\", error);\n      this.messages.push(\"Error: WebSocket connection failed\");\n    };\n    this.socket.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n      this.messages.push(\"Disconnected from server\");\n    };\n  },\n  methods: {\n    async fetchAvailableUsers() {\n      try {\n        const response = await fetch('http://localhost:8080/api/openchat', {\n          credentials: 'include'\n        });\n        if (response.ok) {\n          this.availableUsers = await response.json();\n          console.log(\"Available users:\", this.availableUsers);\n        } else {\n          console.error('Failed to fetch available users');\n        }\n      } catch (error) {\n        console.error('Error fetching available users:', error);\n      }\n    },\n    sendMessage() {\n      if (this.socket && this.message.trim() !== \"\" && this.receiver) {\n        if (this.socket.readyState !== WebSocket.OPEN) {\n          this.messages.push(\"Error: WebSocket is not connected\");\n          return;\n        }\n        this.currentMessage.type = \"message\";\n        this.currentMessage.receiver = this.receiver;\n        this.currentMessage.message = this.message;\n        console.log(\"Sending message:\", this.currentMessage);\n        try {\n          this.socket.send(JSON.stringify(this.currentMessage));\n          this.messages.push(`Sent to ${this.receiver}: ${this.message}`);\n          this.message = \"\";\n          this.scrollToBottom();\n        } catch (error) {\n          console.error(\"Error sending message:\", error);\n          this.messages.push(\"Error: Failed to send message\");\n        }\n      } else if (!this.receiver) {\n        this.messages.push(\"Error: Please select a receiver first\");\n      }\n    },\n    scrollToBottom() {\n      this.$nextTick(() => {\n        const container = this.$refs.messagesContainer;\n        if (container) {\n          container.scrollTop = container.scrollHeight;\n        }\n      });\n    }\n  }\n};","map":{"version":3,"names":["fetchInfo","data","socket","message","receiver","messages","availableUsers","currentMessage","type","username","mounted","userInfo","Username","console","log","fetchAvailableUsers","error","WebSocket","onmessage","event","JSON","parse","push","scrollToBottom","onopen","onerror","onclose","methods","response","fetch","credentials","ok","json","sendMessage","trim","readyState","OPEN","send","stringify","$nextTick","container","$refs","messagesContainer","scrollTop","scrollHeight"],"sources":["/Users/apple/Desktop/social-1/social-network/frontend/src/components/WebSocket.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>WebSocket</h1>\n        <div class=\"user-selection\">\n            <label for=\"receiver\">Select User to Message:</label>\n            <select v-model=\"receiver\" id=\"receiver\">\n                <option value=\"\">Select a user...</option>\n                <option v-for=\"user in availableUsers\" :key=\"user.username\" :value=\"user.username\">\n                    {{ user.username }}\n                </option>\n            </select>\n        </div>\n        <div class=\"chat-container\">\n            <div class=\"messages\" ref=\"messagesContainer\">\n                <div v-for=\"(msg, index) in messages\" :key=\"index\" class=\"message\">\n                    {{ msg }}\n                </div>\n            </div>\n            <div class=\"input-container\">\n                <input \n                    v-model=\"message\" \n                    @keyup.enter=\"sendMessage\" \n                    placeholder=\"Type a message...\" \n                    :disabled=\"!receiver\"\n                />\n                <button @click=\"sendMessage\" :disabled=\"!receiver || !message.trim()\">Send</button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { fetchInfo } from '../api/getInfo.js';\n\nexport default {\n    data() {\n        return {\n            socket: null,\n            message: '',\n            receiver: '',\n            messages: [],\n            availableUsers: [],\n            currentMessage: {\n                type: 'message',\n                message: '',\n                receiver: '',\n                username: ''\n            }\n        };\n    },\n    \n    async mounted() {\n        // Get current user info\n        try {\n            const userInfo = await fetchInfo();\n            this.currentMessage.username = userInfo.Username;\n            console.log(\"Current user:\", userInfo.Username);\n            await this.fetchAvailableUsers();\n        } catch (error) {\n            console.error(\"Error fetching user info:\", error);\n        }\n\n        // Use native WebSocket API\n        this.socket = new WebSocket(\"ws://localhost:8080/ws\");\n\n        this.socket.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            console.log(\"Received message:\", data);\n            \n            if (data.error) {\n                this.messages.push(`Error: ${data.error}`);\n            } else {\n                this.messages.push(`${data.username}: ${data.message}`);\n            }\n            this.scrollToBottom();\n        };\n\n        this.socket.onopen = () => {\n            console.log(\"WebSocket connected\");\n            this.messages.push(\"Connected to chat server\");\n        };\n\n        this.socket.onerror = (error) => {\n            console.error(\"WebSocket error:\", error);\n            this.messages.push(\"Error: WebSocket connection failed\");\n        };\n\n        this.socket.onclose = () => {\n            console.log(\"WebSocket disconnected\");\n            this.messages.push(\"Disconnected from server\");\n        };\n    },\n    methods: {\n        async fetchAvailableUsers() {\n            try {\n                const response = await fetch('http://localhost:8080/api/openchat', {\n                    credentials: 'include'\n                });\n                if (response.ok) {\n                    this.availableUsers = await response.json();\n                    console.log(\"Available users:\", this.availableUsers);\n                } else {\n                    console.error('Failed to fetch available users');\n                }\n            } catch (error) {\n                console.error('Error fetching available users:', error);\n            }\n        },\n        sendMessage() {\n            if (this.socket && this.message.trim() !== \"\" && this.receiver) {\n                if (this.socket.readyState !== WebSocket.OPEN) {\n                    this.messages.push(\"Error: WebSocket is not connected\");\n                    return;\n                }\n\n                this.currentMessage.type = \"message\";\n                this.currentMessage.receiver = this.receiver;\n                this.currentMessage.message = this.message;\n                \n                console.log(\"Sending message:\", this.currentMessage);\n                try {\n                    this.socket.send(JSON.stringify(this.currentMessage));\n                    this.messages.push(`Sent to ${this.receiver}: ${this.message}`);\n                    this.message = \"\";\n                    this.scrollToBottom();\n                } catch (error) {\n                    console.error(\"Error sending message:\", error);\n                    this.messages.push(\"Error: Failed to send message\");\n                }\n            } else if (!this.receiver) {\n                this.messages.push(\"Error: Please select a receiver first\");\n            }\n        },\n        scrollToBottom() {\n            this.$nextTick(() => {\n                const container = this.$refs.messagesContainer;\n                if (container) {\n                    container.scrollTop = container.scrollHeight;\n                }\n            });\n        }\n    },\n};\n</script>\n\n<style scoped>\n.chat-container {\n    display: flex;\n    flex-direction: column;\n    height: 500px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    margin: 20px 0;\n}\n\n.messages {\n    flex-grow: 1;\n    overflow-y: auto;\n    padding: 10px;\n}\n\n.message {\n    margin: 5px 0;\n    padding: 8px;\n    border-radius: 4px;\n    background-color: #f0f0f0;\n}\n\n.input-container {\n    display: flex;\n    padding: 10px;\n    border-top: 1px solid #ccc;\n}\n\n.input-container input {\n    flex-grow: 1;\n    margin-right: 10px;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.input-container button {\n    padding: 8px 16px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.input-container button:disabled {\n    background-color: #cccccc;\n    cursor: not-allowed;\n}\n\n.user-selection {\n    margin: 20px 0;\n}\n\n.user-selection select {\n    padding: 8px;\n    border-radius: 4px;\n    border: 1px solid #ccc;\n    min-width: 200px;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}